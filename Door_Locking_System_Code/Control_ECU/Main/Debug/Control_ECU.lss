
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000272e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000272e  000027c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  000027da  2**0
                  ALLOC
  3 .stab         00002d90  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171b  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a818  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_4>
      14:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_9>
      28:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_10>
      2c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <main>
      8a:	0c 94 95 13 	jmp	0x272a	; 0x272a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include <avr/io.h>


/* Initialize the BUZZER */

void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	// Set direction of BUZZER_PIN as input
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>

	// Deactivates Buzzer at beginning

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:


/* Turn on Buzzer */

void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

// Deactivate Buzzer
void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DC_Motor_init>:
#include "gpio.h"
#include <avr/io.h>
#include "PWM.h"

/* Initialize the MOTOR */
void DC_Motor_init(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/* Set Direction of Input1 and Input2 pin as input */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID , IN1_PIN_ID , PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID , IN2_PIN_ID , PIN_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>

	/* Stop the Motor IN1 = 0 & IN2 = 0 */
	GPIO_writePin(DC_MOTOR_PORT_ID , IN1_PIN_ID , LOGIC_LOW);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID , IN2_PIN_ID , LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	67 e0       	ldi	r22, 0x07	; 7
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DC_Motor_Rotate>:




// Example usage for 50% duty cycle
void DC_Motor_Rotate(Dc_Motor_State state, uint8 duty_cycle_percentage) {
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DC_Motor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DC_Motor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02


	if(duty_cycle_percentage > 100)
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	85 36       	cpi	r24, 0x65	; 101
     be2:	10 f0       	brcs	.+4      	; 0xbe8 <DC_Motor_Rotate+0x1a>
		duty_cycle_percentage = 100;
     be4:	84 e6       	ldi	r24, 0x64	; 100
     be6:	8a 83       	std	Y+2, r24	; 0x02

	PWM_Set_Duty_Cycle(duty_cycle_percentage);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <PWM_Set_Duty_Cycle>

    switch(state) {
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	3c 83       	std	Y+4, r19	; 0x04
     bf6:	2b 83       	std	Y+3, r18	; 0x03
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	91 05       	cpc	r25, r1
     c00:	31 f0       	breq	.+12     	; 0xc0e <DC_Motor_Rotate+0x40>
     c02:	2b 81       	ldd	r18, Y+3	; 0x03
     c04:	3c 81       	ldd	r19, Y+4	; 0x04
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	61 f0       	breq	.+24     	; 0xc24 <DC_Motor_Rotate+0x56>
     c0c:	16 c0       	rjmp	.+44     	; 0xc3a <DC_Motor_Rotate+0x6c>
        case DC_MOTOR_CW:
            GPIO_writePin(DC_MOTOR_PORT_ID, IN1_PIN_ID, LOGIC_HIGH);
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	66 e0       	ldi	r22, 0x06	; 6
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
            GPIO_writePin(DC_MOTOR_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	67 e0       	ldi	r22, 0x07	; 7
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <DC_Motor_Rotate+0x80>
            break;

        case DC_MOTOR_CCW:
            GPIO_writePin(DC_MOTOR_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	66 e0       	ldi	r22, 0x06	; 6
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
            GPIO_writePin(DC_MOTOR_PORT_ID, IN2_PIN_ID, LOGIC_HIGH);
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	67 e0       	ldi	r22, 0x07	; 7
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <DC_Motor_Rotate+0x80>
            break;

        case DC_MOTOR_STOP:
         default:
            GPIO_writePin(DC_MOTOR_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	66 e0       	ldi	r22, 0x06	; 6
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
            GPIO_writePin(DC_MOTOR_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	67 e0       	ldi	r22, 0x07	; 7
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_writePin>
            break;

    }


}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <DC_Motor_getStatus>:



/* Function to get the current status of the motor */
Dc_Motor_State DC_Motor_getStatus(void) {
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <DC_Motor_getStatus+0x6>
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	uint8 in1_state = GPIO_readPin(DC_MOTOR_PORT_ID, IN1_PIN_ID);
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	66 e0       	ldi	r22, 0x06	; 6
     c6c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_readPin>
     c70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 in2_state = GPIO_readPin(DC_MOTOR_PORT_ID, IN2_PIN_ID);
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	67 e0       	ldi	r22, 0x07	; 7
     c76:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_readPin>
     c7a:	89 83       	std	Y+1, r24	; 0x01

	/* Determine the motor state based on the IN1 and IN2 pin states */
	if (in1_state == LOGIC_LOW && in2_state == LOGIC_LOW) {
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	88 23       	and	r24, r24
     c80:	29 f4       	brne	.+10     	; 0xc8c <DC_Motor_getStatus+0x30>
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 23       	and	r24, r24
     c86:	11 f4       	brne	.+4      	; 0xc8c <DC_Motor_getStatus+0x30>
		return DC_MOTOR_STOP;  // Motor is stopped
     c88:	1b 82       	std	Y+3, r1	; 0x03
     c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <DC_Motor_getStatus+0x56>
	} else if (in1_state == LOGIC_LOW && in2_state == LOGIC_HIGH) {
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	88 23       	and	r24, r24
     c90:	31 f4       	brne	.+12     	; 0xc9e <DC_Motor_getStatus+0x42>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	19 f4       	brne	.+6      	; 0xc9e <DC_Motor_getStatus+0x42>
		return DC_MOTOR_CW;    // Motor is rotating clockwise
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8b 83       	std	Y+3, r24	; 0x03
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <DC_Motor_getStatus+0x56>
	} else if (in1_state == LOGIC_HIGH && in2_state == LOGIC_LOW) {
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	31 f4       	brne	.+12     	; 0xcb0 <DC_Motor_getStatus+0x54>
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 23       	and	r24, r24
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <DC_Motor_getStatus+0x54>
		return DC_MOTOR_CCW;   // Motor is rotating counterclockwise
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <DC_Motor_getStatus+0x56>
	}

	// Default return to stop (safety in case of unexpected states)
	return DC_MOTOR_STOP;
     cb0:	1b 82       	std	Y+3, r1	; 0x03
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <PIR_init>:
 * -------------------
 * Initializes the PIR sensor by setting up the pin direction.
 * PIR_PORT_ID: The port where the PIR sensor is connected.
 * PIR_PIN_ID: The specific pin of the port used for PIR sensor input.
 */
void PIR_init(){
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);  // Set the PIR pin as an input
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	62 e0       	ldi	r22, 0x02	; 2
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <PIR_Motion>:
 * ---------------------
 * Reads and returns the state of the PIR sensor.
 * Returns:
 *    uint8 motion - The current state of the PIR sensor (1 if motion is detected, 0 otherwise).
 */
uint8 PIR_Motion(){
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62

	uint8 motion = GPIO_readPin(PIR_PORT_ID, PIR_PIN_ID);  // Read PIR sensor pin value
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	62 e0       	ldi	r22, 0x02	; 2
     ce6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_readPin>
     cea:	89 83       	std	Y+1, r24	; 0x01

	return motion;  // Return motion status
     cec:	89 81       	ldd	r24, Y+1	; 0x01
}
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <PWM_Timer0_init>:

#include "PWM.h"
#include "gpio.h"
#include <avr/io.h>

void PWM_Timer0_init(void){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62

    TCNT0 = 0; // Start Count From Zero
     cfe:	e2 e5       	ldi	r30, 0x52	; 82
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	10 82       	st	Z, r1

    // Make the OC0 as Output PIN -> pin which generates the PWM signal
    GPIO_setupPinDirection(PORTB_ID , PWM_OUTPUT_PIN , PIN_OUTPUT);
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_setupPinDirection>
    /*
        1. Set Fast PWM Mode: WGM01 = 1 & WGM00
        2. Set non-inverting Mode (Clear OC0 pin on compare match) COM01 = 1
        3. Set prescaler 64: CS00 = 1 & CS01 = 1
    */
    TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS01) | (1 << CS00);
     d0e:	e3 e5       	ldi	r30, 0x53	; 83
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	8b e6       	ldi	r24, 0x6B	; 107
     d14:	80 83       	st	Z, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <PWM_Set_Duty_Cycle>:

void PWM_Set_Duty_Cycle(uint8 duty_cycle){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	0f 92       	push	r0
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01

	/* Set Duty Cycle */

	if(duty_cycle > 100)
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	85 36       	cpi	r24, 0x65	; 101
     d2c:	10 f0       	brcs	.+4      	; 0xd32 <PWM_Set_Duty_Cycle+0x16>
		duty_cycle = 100;
     d2e:	84 e6       	ldi	r24, 0x64	; 100
     d30:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = (uint8)(((uint16)255 * duty_cycle) / 100);
     d32:	ec e5       	ldi	r30, 0x5C	; 92
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	48 2f       	mov	r20, r24
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	ca 01       	movw	r24, r20
     d3e:	9c 01       	movw	r18, r24
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	c9 01       	movw	r24, r18
     d46:	96 95       	lsr	r25
     d48:	98 2f       	mov	r25, r24
     d4a:	88 27       	eor	r24, r24
     d4c:	97 95       	ror	r25
     d4e:	87 95       	ror	r24
     d50:	82 1b       	sub	r24, r18
     d52:	93 0b       	sbc	r25, r19
     d54:	84 0f       	add	r24, r20
     d56:	95 1f       	adc	r25, r21
     d58:	24 e6       	ldi	r18, 0x64	; 100
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	b9 01       	movw	r22, r18
     d5e:	0e 94 28 13 	call	0x2650	; 0x2650 <__udivmodhi4>
     d62:	cb 01       	movw	r24, r22
     d64:	80 83       	st	Z, r24
}
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <EEPROM_writeByte>:
 *
 * Returns:
 *   SUCCESS if write operation is successful, ERROR otherwise
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <EEPROM_writeByte+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <EEPROM_writeByte+0x8>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit for initiating communication */
    TWI_start();
     d80:	0e 94 b1 11 	call	0x2362	; 0x2362 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d84:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	11 f0       	breq	.+4      	; 0xd90 <EEPROM_writeByte+0x22>
        return ERROR;
     d8c:	1c 82       	std	Y+4, r1	; 0x04
     d8e:	28 c0       	rjmp	.+80     	; 0xde0 <EEPROM_writeByte+0x72>

    /* Send the device address with A8 A9 A10 bits for the memory location and R/W=0 (write mode) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	80 70       	andi	r24, 0x00	; 0
     d96:	97 70       	andi	r25, 0x07	; 7
     d98:	88 0f       	add	r24, r24
     d9a:	89 2f       	mov	r24, r25
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 0b       	sbc	r25, r25
     da0:	91 95       	neg	r25
     da2:	80 6a       	ori	r24, 0xA0	; 160
     da4:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     da8:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     dac:	88 31       	cpi	r24, 0x18	; 24
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_writeByte+0x46>
        return ERROR; 
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <EEPROM_writeByte+0x72>

    /* Send the required memory location address (lower byte of the address) */
    TWI_writeByte((uint8)(u16addr));
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dba:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     dbe:	88 32       	cpi	r24, 0x28	; 40
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_writeByte+0x58>
        return ERROR;
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	0d c0       	rjmp	.+26     	; 0xde0 <EEPROM_writeByte+0x72>

    /* Write the data byte to the specified EEPROM location */
    TWI_writeByte(u8data);
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dcc:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_writeByte+0x6a>
        return ERROR;
     dd4:	1c 82       	std	Y+4, r1	; 0x04
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit to terminate the write operation */
    TWI_stop();
     dd8:	0e 94 c1 11 	call	0x2382	; 0x2382 <TWI_stop>

    return SUCCESS;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8c 83       	std	Y+4, r24	; 0x04
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <EEPROM_readByte>:
 *
 * Returns:
 *   SUCCESS if read operation is successful, ERROR otherwise
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <EEPROM_readByte+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <EEPROM_readByte+0x8>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	7c 83       	std	Y+4, r23	; 0x04
     e04:	6b 83       	std	Y+3, r22	; 0x03
    /* Send the Start Bit for initiating communication */
    TWI_start();
     e06:	0e 94 b1 11 	call	0x2362	; 0x2362 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e0a:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	11 f0       	breq	.+4      	; 0xe16 <EEPROM_readByte+0x26>
        return ERROR;
     e12:	1d 82       	std	Y+5, r1	; 0x05
     e14:	44 c0       	rjmp	.+136    	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the device address with A8 A9 A10 bits and R/W=0 (write mode) to set up read address */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	80 70       	andi	r24, 0x00	; 0
     e1c:	97 70       	andi	r25, 0x07	; 7
     e1e:	88 0f       	add	r24, r24
     e20:	89 2f       	mov	r24, r25
     e22:	88 1f       	adc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	91 95       	neg	r25
     e28:	80 6a       	ori	r24, 0xA0	; 160
     e2a:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e2e:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e32:	88 31       	cpi	r24, 0x18	; 24
     e34:	11 f0       	breq	.+4      	; 0xe3a <EEPROM_readByte+0x4a>
        return ERROR;
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	32 c0       	rjmp	.+100    	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the required memory location address (lower byte of the address) */
    TWI_writeByte((uint8)(u16addr));
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e40:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e44:	88 32       	cpi	r24, 0x28	; 40
     e46:	11 f0       	breq	.+4      	; 0xe4c <EEPROM_readByte+0x5c>
        return ERROR;
     e48:	1d 82       	std	Y+5, r1	; 0x05
     e4a:	29 c0       	rjmp	.+82     	; 0xe9e <EEPROM_readByte+0xae>

    /* Send a Repeated Start Bit for reading operation */
    TWI_start();
     e4c:	0e 94 b1 11 	call	0x2362	; 0x2362 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e50:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	11 f0       	breq	.+4      	; 0xe5c <EEPROM_readByte+0x6c>
        return ERROR;
     e58:	1d 82       	std	Y+5, r1	; 0x05
     e5a:	21 c0       	rjmp	.+66     	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the device address with A8 A9 A10 bits and R/W=1 (read mode) to read data */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7) | 1));
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	80 70       	andi	r24, 0x00	; 0
     e62:	97 70       	andi	r25, 0x07	; 7
     e64:	88 0f       	add	r24, r24
     e66:	89 2f       	mov	r24, r25
     e68:	88 1f       	adc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	91 95       	neg	r25
     e6e:	81 6a       	ori	r24, 0xA1	; 161
     e70:	0e 94 cc 11 	call	0x2398	; 0x2398 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e74:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e78:	80 34       	cpi	r24, 0x40	; 64
     e7a:	11 f0       	breq	.+4      	; 0xe80 <EEPROM_readByte+0x90>
        return ERROR;
     e7c:	1d 82       	std	Y+5, r1	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <EEPROM_readByte+0xae>

    /* Read byte from memory without sending ACK to signal end of reading */
    *u8data = TWI_readByteWithNACK();
     e80:	0e 94 f6 11 	call	0x23ec	; 0x23ec <TWI_readByteWithNACK>
     e84:	eb 81       	ldd	r30, Y+3	; 0x03
     e86:	fc 81       	ldd	r31, Y+4	; 0x04
     e88:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e8a:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_getStatus>
     e8e:	88 35       	cpi	r24, 0x58	; 88
     e90:	11 f0       	breq	.+4      	; 0xe96 <EEPROM_readByte+0xa6>
        return ERROR;
     e92:	1d 82       	std	Y+5, r1	; 0x05
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the Stop Bit to terminate the read operation */
    TWI_stop();
     e96:	0e 94 c1 11 	call	0x2382	; 0x2382 <TWI_stop>

    return SUCCESS;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <EEPROM_writeArray>:
 *   address  - Starting address in EEPROM for the array
 *   arr      - Pointer to the array of data to be written
 *   arr_size - Number of bytes to write from the array
 */
void EEPROM_writeArray(uint16 address, uint8 *arr, uint8 arr_size)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	64 97       	sbiw	r28, 0x14	; 20
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	99 8b       	std	Y+17, r25	; 0x11
     ec6:	88 8b       	std	Y+16, r24	; 0x10
     ec8:	7b 8b       	std	Y+19, r23	; 0x13
     eca:	6a 8b       	std	Y+18, r22	; 0x12
     ecc:	4c 8b       	std	Y+20, r20	; 0x14
    for(uint8 i = 0; i < arr_size; i++) {
     ece:	1f 86       	std	Y+15, r1	; 0x0f
     ed0:	8a c0       	rjmp	.+276    	; 0xfe6 <EEPROM_writeArray+0x136>
        EEPROM_writeByte((address + i), arr[i]);  // Write each byte from the array
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	88 89       	ldd	r24, Y+16	; 0x10
     eda:	99 89       	ldd	r25, Y+17	; 0x11
     edc:	a9 01       	movw	r20, r18
     ede:	48 0f       	add	r20, r24
     ee0:	59 1f       	adc	r21, r25
     ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	8a 89       	ldd	r24, Y+18	; 0x12
     eea:	9b 89       	ldd	r25, Y+19	; 0x13
     eec:	fc 01       	movw	r30, r24
     eee:	e2 0f       	add	r30, r18
     ef0:	f3 1f       	adc	r31, r19
     ef2:	20 81       	ld	r18, Z
     ef4:	ca 01       	movw	r24, r20
     ef6:	62 2f       	mov	r22, r18
     ef8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <EEPROM_writeByte>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e2       	ldi	r26, 0x20	; 32
     f02:	b1 e4       	ldi	r27, 0x41	; 65
     f04:	8b 87       	std	Y+11, r24	; 0x0b
     f06:	9c 87       	std	Y+12, r25	; 0x0c
     f08:	ad 87       	std	Y+13, r26	; 0x0d
     f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f10:	8d 85       	ldd	r24, Y+13	; 0x0d
     f12:	9e 85       	ldd	r25, Y+14	; 0x0e
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a ef       	ldi	r20, 0xFA	; 250
     f1a:	54 e4       	ldi	r21, 0x44	; 68
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8f 83       	std	Y+7, r24	; 0x07
     f26:	98 87       	std	Y+8, r25	; 0x08
     f28:	a9 87       	std	Y+9, r26	; 0x09
     f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f2c:	6f 81       	ldd	r22, Y+7	; 0x07
     f2e:	78 85       	ldd	r23, Y+8	; 0x08
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	9a 85       	ldd	r25, Y+10	; 0x0a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <EEPROM_writeArray+0x9e>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <EEPROM_writeArray+0x11c>
	else if (__tmp > 65535)
     f4e:	6f 81       	ldd	r22, Y+7	; 0x07
     f50:	78 85       	ldd	r23, Y+8	; 0x08
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	4c f5       	brge	.+82     	; 0xfb8 <EEPROM_writeArray+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	6b 85       	ldd	r22, Y+11	; 0x0b
     f68:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <EEPROM_writeArray+0xfe>
     f90:	88 ec       	ldi	r24, 0xC8	; 200
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <EEPROM_writeArray+0xec>
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <EEPROM_writeArray+0xe0>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <EEPROM_writeArray+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <EEPROM_writeArray+0x128>
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
 *   arr      - Pointer to the array of data to be written
 *   arr_size - Number of bytes to write from the array
 */
void EEPROM_writeArray(uint16 address, uint8 *arr, uint8 arr_size)
{
    for(uint8 i = 0; i < arr_size; i++) {
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	8f 87       	std	Y+15, r24	; 0x0f
     fe6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe8:	8c 89       	ldd	r24, Y+20	; 0x14
     fea:	98 17       	cp	r25, r24
     fec:	08 f4       	brcc	.+2      	; 0xff0 <EEPROM_writeArray+0x140>
     fee:	71 cf       	rjmp	.-286    	; 0xed2 <EEPROM_writeArray+0x22>
        EEPROM_writeByte((address + i), arr[i]);  // Write each byte from the array
        _delay_ms(10);  // Delay to allow EEPROM write time
    }
}
     ff0:	64 96       	adiw	r28, 0x14	; 20
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <EEPROM_readArray>:
 *   address  - Starting address in EEPROM for the array
 *   arr      - Pointer to store the read data
 *   arr_size - Number of bytes to read into the array
 */
void EEPROM_readArray(uint16 address, uint8 *arr, uint8 arr_size)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	64 97       	sbiw	r28, 0x14	; 20
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	99 8b       	std	Y+17, r25	; 0x11
    1018:	88 8b       	std	Y+16, r24	; 0x10
    101a:	7b 8b       	std	Y+19, r23	; 0x13
    101c:	6a 8b       	std	Y+18, r22	; 0x12
    101e:	4c 8b       	std	Y+20, r20	; 0x14
    for(uint8 i = 0; i < arr_size; i++) {
    1020:	1f 86       	std	Y+15, r1	; 0x0f
    1022:	88 c0       	rjmp	.+272    	; 0x1134 <EEPROM_readArray+0x132>
        EEPROM_readByte((address + i), &arr[i]);  // Read each byte into the array
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	88 89       	ldd	r24, Y+16	; 0x10
    102c:	99 89       	ldd	r25, Y+17	; 0x11
    102e:	a9 01       	movw	r20, r18
    1030:	48 0f       	add	r20, r24
    1032:	59 1f       	adc	r21, r25
    1034:	8f 85       	ldd	r24, Y+15	; 0x0f
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8a 89       	ldd	r24, Y+18	; 0x12
    103c:	9b 89       	ldd	r25, Y+19	; 0x13
    103e:	28 0f       	add	r18, r24
    1040:	39 1f       	adc	r19, r25
    1042:	ca 01       	movw	r24, r20
    1044:	b9 01       	movw	r22, r18
    1046:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <EEPROM_readByte>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e2       	ldi	r26, 0x20	; 32
    1050:	b1 e4       	ldi	r27, 0x41	; 65
    1052:	8b 87       	std	Y+11, r24	; 0x0b
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	ad 87       	std	Y+13, r26	; 0x0d
    1058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	7c 85       	ldd	r23, Y+12	; 0x0c
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	9e 85       	ldd	r25, Y+14	; 0x0e
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a ef       	ldi	r20, 0xFA	; 250
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8f 83       	std	Y+7, r24	; 0x07
    1074:	98 87       	std	Y+8, r25	; 0x08
    1076:	a9 87       	std	Y+9, r26	; 0x09
    1078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <EEPROM_readArray+0x9a>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	3f c0       	rjmp	.+126    	; 0x111a <EEPROM_readArray+0x118>
	else if (__tmp > 65535)
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <EEPROM_readArray+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <EEPROM_readArray+0xfa>
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <EEPROM_readArray+0xe8>
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <EEPROM_readArray+0xdc>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <EEPROM_readArray+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <EEPROM_readArray+0x124>
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
 *   arr      - Pointer to store the read data
 *   arr_size - Number of bytes to read into the array
 */
void EEPROM_readArray(uint16 address, uint8 *arr, uint8 arr_size)
{
    for(uint8 i = 0; i < arr_size; i++) {
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	8f 87       	std	Y+15, r24	; 0x0f
    1134:	9f 85       	ldd	r25, Y+15	; 0x0f
    1136:	8c 89       	ldd	r24, Y+20	; 0x14
    1138:	98 17       	cp	r25, r24
    113a:	08 f4       	brcc	.+2      	; 0x113e <EEPROM_readArray+0x13c>
    113c:	73 cf       	rjmp	.-282    	; 0x1024 <EEPROM_readArray+0x22>
        EEPROM_readByte((address + i), &arr[i]);  // Read each byte into the array
        _delay_ms(10);  // Delay to ensure stable reading
    }
}
    113e:	64 96       	adiw	r28, 0x14	; 20
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_setupPinDirection+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <GPIO_setupPinDirection+0x8>
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <GPIO_setupPinDirection+0x1c>
    116a:	d5 c0       	rjmp	.+426    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	08 f0       	brcs	.+2      	; 0x1174 <GPIO_setupPinDirection+0x24>
    1172:	d1 c0       	rjmp	.+418    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3d 83       	std	Y+5, r19	; 0x05
    117c:	2c 83       	std	Y+4, r18	; 0x04
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <GPIO_setupPinDirection+0x3a>
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <GPIO_setupPinDirection+0xc0>
    118a:	2c 81       	ldd	r18, Y+4	; 0x04
    118c:	3d 81       	ldd	r19, Y+5	; 0x05
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <GPIO_setupPinDirection+0x4e>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	71 f0       	breq	.+28     	; 0x11b8 <GPIO_setupPinDirection+0x68>
    119c:	bc c0       	rjmp	.+376    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
    119e:	2c 81       	ldd	r18, Y+4	; 0x04
    11a0:	3d 81       	ldd	r19, Y+5	; 0x05
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <GPIO_setupPinDirection+0x5a>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <GPIO_setupPinDirection+0x118>
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <GPIO_setupPinDirection+0x66>
    11b4:	85 c0       	rjmp	.+266    	; 0x12c0 <GPIO_setupPinDirection+0x170>
    11b6:	af c0       	rjmp	.+350    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0x8c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0x88>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	98 c0       	rjmp	.+304    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11e6:	aa e3       	ldi	r26, 0x3A	; 58
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ea e3       	ldi	r30, 0x3A	; 58
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_setupPinDirection+0xb4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_setupPinDirection+0xb0>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	83 c0       	rjmp	.+262    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_setupPinDirection+0xe4>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_setupPinDirection+0xe0>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	6c c0       	rjmp	.+216    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    123e:	a7 e3       	ldi	r26, 0x37	; 55
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e7 e3       	ldi	r30, 0x37	; 55
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <GPIO_setupPinDirection+0x10c>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <GPIO_setupPinDirection+0x108>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    126e:	a4 e3       	ldi	r26, 0x34	; 52
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_setupPinDirection+0x13c>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_setupPinDirection+0x138>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	40 c0       	rjmp	.+128    	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1296:	a4 e3       	ldi	r26, 0x34	; 52
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_setupPinDirection+0x164>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_setupPinDirection+0x160>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	2b c0       	rjmp	.+86     	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12c6:	a1 e3       	ldi	r26, 0x31	; 49
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e1 e3       	ldi	r30, 0x31	; 49
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_setupPinDirection+0x194>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_setupPinDirection+0x190>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12ee:	a1 e3       	ldi	r26, 0x31	; 49
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e1 e3       	ldi	r30, 0x31	; 49
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <GPIO_setupPinDirection+0x1bc>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <GPIO_setupPinDirection+0x1b8>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_writePin+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_writePin+0x8>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
    1338:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <GPIO_writePin+0x1c>
    1340:	d5 c0       	rjmp	.+426    	; 0x14ec <GPIO_writePin+0x1c6>
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	08 f0       	brcs	.+2      	; 0x134a <GPIO_writePin+0x24>
    1348:	d1 c0       	rjmp	.+418    	; 0x14ec <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <GPIO_writePin+0x3a>
    135e:	43 c0       	rjmp	.+134    	; 0x13e6 <GPIO_writePin+0xc0>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <GPIO_writePin+0x4e>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	71 f0       	breq	.+28     	; 0x138e <GPIO_writePin+0x68>
    1372:	bc c0       	rjmp	.+376    	; 0x14ec <GPIO_writePin+0x1c6>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_writePin+0x5a>
    137e:	5f c0       	rjmp	.+190    	; 0x143e <GPIO_writePin+0x118>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <GPIO_writePin+0x66>
    138a:	85 c0       	rjmp	.+266    	; 0x1496 <GPIO_writePin+0x170>
    138c:	af c0       	rjmp	.+350    	; 0x14ec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	a1 f4       	brne	.+40     	; 0x13bc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_writePin+0x8c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_writePin+0x88>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	98 c0       	rjmp	.+304    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13bc:	ab e3       	ldi	r26, 0x3B	; 59
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_writePin+0xb4>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_writePin+0xb0>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	83 c0       	rjmp	.+262    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	a1 f4       	brne	.+40     	; 0x1414 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_writePin+0xe4>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_writePin+0xe0>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	6c c0       	rjmp	.+216    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1414:	a8 e3       	ldi	r26, 0x38	; 56
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_writePin+0x10c>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_writePin+0x108>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	57 c0       	rjmp	.+174    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	a1 f4       	brne	.+40     	; 0x146c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1444:	a5 e3       	ldi	r26, 0x35	; 53
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e3       	ldi	r30, 0x35	; 53
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_writePin+0x13c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_writePin+0x138>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	40 c0       	rjmp	.+128    	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    146c:	a5 e3       	ldi	r26, 0x35	; 53
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_writePin+0x164>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_writePin+0x160>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	2b c0       	rjmp	.+86     	; 0x14ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	a1 f4       	brne	.+40     	; 0x14c4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_writePin+0x194>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_writePin+0x190>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14c4:	a2 e3       	ldi	r26, 0x32	; 50
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e2 e3       	ldi	r30, 0x32	; 50
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_writePin+0x1bc>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_writePin+0x1b8>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_readPin+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GPIO_readPin+0x8>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    150e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	88 30       	cpi	r24, 0x08	; 8
    1514:	08 f0       	brcs	.+2      	; 0x1518 <GPIO_readPin+0x1c>
    1516:	84 c0       	rjmp	.+264    	; 0x1620 <GPIO_readPin+0x124>
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	08 f0       	brcs	.+2      	; 0x1520 <GPIO_readPin+0x24>
    151e:	80 c0       	rjmp	.+256    	; 0x1620 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3d 83       	std	Y+5, r19	; 0x05
    1528:	2c 83       	std	Y+4, r18	; 0x04
    152a:	4c 81       	ldd	r20, Y+4	; 0x04
    152c:	5d 81       	ldd	r21, Y+5	; 0x05
    152e:	41 30       	cpi	r20, 0x01	; 1
    1530:	51 05       	cpc	r21, r1
    1532:	79 f1       	breq	.+94     	; 0x1592 <GPIO_readPin+0x96>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	91 05       	cpc	r25, r1
    153c:	34 f4       	brge	.+12     	; 0x154a <GPIO_readPin+0x4e>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	69 f0       	breq	.+26     	; 0x1562 <GPIO_readPin+0x66>
    1548:	6b c0       	rjmp	.+214    	; 0x1620 <GPIO_readPin+0x124>
    154a:	4c 81       	ldd	r20, Y+4	; 0x04
    154c:	5d 81       	ldd	r21, Y+5	; 0x05
    154e:	42 30       	cpi	r20, 0x02	; 2
    1550:	51 05       	cpc	r21, r1
    1552:	b9 f1       	breq	.+110    	; 0x15c2 <GPIO_readPin+0xc6>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <GPIO_readPin+0x64>
    155e:	49 c0       	rjmp	.+146    	; 0x15f2 <GPIO_readPin+0xf6>
    1560:	5f c0       	rjmp	.+190    	; 0x1620 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1562:	e9 e3       	ldi	r30, 0x39	; 57
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_readPin+0x7e>
    1576:	55 95       	asr	r21
    1578:	47 95       	ror	r20
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_readPin+0x7a>
    157e:	ca 01       	movw	r24, r20
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	90 70       	andi	r25, 0x00	; 0
    1584:	88 23       	and	r24, r24
    1586:	19 f0       	breq	.+6      	; 0x158e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	49 c0       	rjmp	.+146    	; 0x1620 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    158e:	19 82       	std	Y+1, r1	; 0x01
    1590:	47 c0       	rjmp	.+142    	; 0x1620 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1592:	e6 e3       	ldi	r30, 0x36	; 54
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_readPin+0xae>
    15a6:	55 95       	asr	r21
    15a8:	47 95       	ror	r20
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_readPin+0xaa>
    15ae:	ca 01       	movw	r24, r20
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	90 70       	andi	r25, 0x00	; 0
    15b4:	88 23       	and	r24, r24
    15b6:	19 f0       	breq	.+6      	; 0x15be <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	31 c0       	rjmp	.+98     	; 0x1620 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	2f c0       	rjmp	.+94     	; 0x1620 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15c2:	e3 e3       	ldi	r30, 0x33	; 51
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <GPIO_readPin+0xde>
    15d6:	55 95       	asr	r21
    15d8:	47 95       	ror	r20
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <GPIO_readPin+0xda>
    15de:	ca 01       	movw	r24, r20
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	88 23       	and	r24, r24
    15e6:	19 f0       	breq	.+6      	; 0x15ee <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	19 c0       	rjmp	.+50     	; 0x1620 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	17 c0       	rjmp	.+46     	; 0x1620 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15f2:	e0 e3       	ldi	r30, 0x30	; 48
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_readPin+0x10e>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <GPIO_readPin+0x10a>
    160e:	ca 01       	movw	r24, r20
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	90 70       	andi	r25, 0x00	; 0
    1614:	88 23       	and	r24, r24
    1616:	19 f0       	breq	.+6      	; 0x161e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    161e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_setupPortDirection+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_setupPortDirection+0x8>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	90 f5       	brcc	.+100    	; 0x16ac <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3c 83       	std	Y+4, r19	; 0x04
    1650:	2b 83       	std	Y+3, r18	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	d1 f0       	breq	.+52     	; 0x1690 <GPIO_setupPortDirection+0x5e>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <GPIO_setupPortDirection+0x3e>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	61 f0       	breq	.+24     	; 0x1686 <GPIO_setupPortDirection+0x54>
    166e:	1e c0       	rjmp	.+60     	; 0x16ac <GPIO_setupPortDirection+0x7a>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <GPIO_setupPortDirection+0x68>
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <GPIO_setupPortDirection+0x72>
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1686:	ea e3       	ldi	r30, 0x3A	; 58
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
    168e:	0e c0       	rjmp	.+28     	; 0x16ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1690:	e7 e3       	ldi	r30, 0x37	; 55
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16a4:	e1 e3       	ldi	r30, 0x31	; 49
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_writePort+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <GPIO_writePort+0x8>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	90 f5       	brcc	.+100    	; 0x1734 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	3c 83       	std	Y+4, r19	; 0x04
    16d8:	2b 83       	std	Y+3, r18	; 0x03
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	d1 f0       	breq	.+52     	; 0x1718 <GPIO_writePort+0x5e>
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	3c 81       	ldd	r19, Y+4	; 0x04
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <GPIO_writePort+0x3e>
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	61 f0       	breq	.+24     	; 0x170e <GPIO_writePort+0x54>
    16f6:	1e c0       	rjmp	.+60     	; 0x1734 <GPIO_writePort+0x7a>
    16f8:	2b 81       	ldd	r18, Y+3	; 0x03
    16fa:	3c 81       	ldd	r19, Y+4	; 0x04
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	81 f0       	breq	.+32     	; 0x1722 <GPIO_writePort+0x68>
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	91 05       	cpc	r25, r1
    170a:	81 f0       	breq	.+32     	; 0x172c <GPIO_writePort+0x72>
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	80 83       	st	Z, r24
    1716:	0e c0       	rjmp	.+28     	; 0x1734 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1718:	e8 e3       	ldi	r30, 0x38	; 56
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 83       	st	Z, r24
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 83       	st	Z, r24
			break;
		}
	}
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <GPIO_readPort+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <GPIO_readPort+0x8>
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1750:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	84 30       	cpi	r24, 0x04	; 4
    1756:	90 f5       	brcc	.+100    	; 0x17bc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3c 83       	std	Y+4, r19	; 0x04
    1760:	2b 83       	std	Y+3, r18	; 0x03
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	91 05       	cpc	r25, r1
    176a:	d1 f0       	breq	.+52     	; 0x17a0 <GPIO_readPort+0x5e>
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	2c f4       	brge	.+10     	; 0x1780 <GPIO_readPort+0x3e>
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	61 f0       	breq	.+24     	; 0x1796 <GPIO_readPort+0x54>
    177e:	1e c0       	rjmp	.+60     	; 0x17bc <GPIO_readPort+0x7a>
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	3c 81       	ldd	r19, Y+4	; 0x04
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <GPIO_readPort+0x68>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	91 05       	cpc	r25, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <GPIO_readPort+0x72>
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1796:	e9 e3       	ldi	r30, 0x39	; 57
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17a0:	e6 e3       	ldi	r30, 0x36	; 54
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17aa:	e3 e3       	ldi	r30, 0x33	; 51
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17b4:	e0 e3       	ldi	r30, 0x30	; 48
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <main>:
uint8 receive_byte();
uint8 check_passwards(uint8 *passward_array1, uint8 *passward_array2);
void _delay_seconds(uint8 seconds);
void Timer_Callbackfunc();

int main() {
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	ae 97       	sbiw	r28, 0x2e	; 46
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61

    /* Enable global interrupts */
    sei();
    17e0:	78 94       	sei

    /* UART configuration setup */
    UART_ConfigType UART_configuartions = { Character_SIZE_8, EVEN_PARITY, ONE_BIT, 9600 };
    17e2:	9e 01       	movw	r18, r28
    17e4:	2d 5e       	subi	r18, 0xED	; 237
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	3e a3       	std	Y+38, r19	; 0x26
    17ea:	2d a3       	std	Y+37, r18	; 0x25
    17ec:	80 e7       	ldi	r24, 0x70	; 112
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	98 a7       	std	Y+40, r25	; 0x28
    17f2:	8f a3       	std	Y+39, r24	; 0x27
    17f4:	97 e0       	ldi	r25, 0x07	; 7
    17f6:	99 a7       	std	Y+41, r25	; 0x29
    17f8:	ef a1       	ldd	r30, Y+39	; 0x27
    17fa:	f8 a5       	ldd	r31, Y+40	; 0x28
    17fc:	00 80       	ld	r0, Z
    17fe:	2f a1       	ldd	r18, Y+39	; 0x27
    1800:	38 a5       	ldd	r19, Y+40	; 0x28
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	38 a7       	std	Y+40, r19	; 0x28
    1808:	2f a3       	std	Y+39, r18	; 0x27
    180a:	ed a1       	ldd	r30, Y+37	; 0x25
    180c:	fe a1       	ldd	r31, Y+38	; 0x26
    180e:	00 82       	st	Z, r0
    1810:	2d a1       	ldd	r18, Y+37	; 0x25
    1812:	3e a1       	ldd	r19, Y+38	; 0x26
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	3e a3       	std	Y+38, r19	; 0x26
    181a:	2d a3       	std	Y+37, r18	; 0x25
    181c:	39 a5       	ldd	r19, Y+41	; 0x29
    181e:	31 50       	subi	r19, 0x01	; 1
    1820:	39 a7       	std	Y+41, r19	; 0x29
    1822:	89 a5       	ldd	r24, Y+41	; 0x29
    1824:	88 23       	and	r24, r24
    1826:	41 f7       	brne	.-48     	; 0x17f8 <main+0x2c>
    UART_init(&UART_configuartions);
    1828:	ce 01       	movw	r24, r28
    182a:	43 96       	adiw	r24, 0x13	; 19
    182c:	0e 94 14 12 	call	0x2428	; 0x2428 <UART_init>

    /* TWI (I2C) configuration setup */
    TWI_ConfigType TWI_configurations = { 0x01, 0x02 };
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	8a 8f       	std	Y+26, r24	; 0x1a
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	8b 8f       	std	Y+27, r24	; 0x1b
    TWI_init(&TWI_configurations);
    1838:	ce 01       	movw	r24, r28
    183a:	4a 96       	adiw	r24, 0x1a	; 26
    183c:	0e 94 91 11 	call	0x2322	; 0x2322 <TWI_init>

    /* Timer setup and callback function initialization */
    Timer_ConfigType TIMER_configurations = { 0, 31250, TIMER1, F_CPU_256, COMPARE };
    1840:	fe 01       	movw	r30, r28
    1842:	7c 96       	adiw	r30, 0x1c	; 28
    1844:	fb a7       	std	Y+43, r31	; 0x2b
    1846:	ea a7       	std	Y+42, r30	; 0x2a
    1848:	29 e6       	ldi	r18, 0x69	; 105
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3d a7       	std	Y+45, r19	; 0x2d
    184e:	2c a7       	std	Y+44, r18	; 0x2c
    1850:	37 e0       	ldi	r19, 0x07	; 7
    1852:	3e a7       	std	Y+46, r19	; 0x2e
    1854:	ec a5       	ldd	r30, Y+44	; 0x2c
    1856:	fd a5       	ldd	r31, Y+45	; 0x2d
    1858:	00 80       	ld	r0, Z
    185a:	2c a5       	ldd	r18, Y+44	; 0x2c
    185c:	3d a5       	ldd	r19, Y+45	; 0x2d
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	3d a7       	std	Y+45, r19	; 0x2d
    1864:	2c a7       	std	Y+44, r18	; 0x2c
    1866:	ea a5       	ldd	r30, Y+42	; 0x2a
    1868:	fb a5       	ldd	r31, Y+43	; 0x2b
    186a:	00 82       	st	Z, r0
    186c:	2a a5       	ldd	r18, Y+42	; 0x2a
    186e:	3b a5       	ldd	r19, Y+43	; 0x2b
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	3b a7       	std	Y+43, r19	; 0x2b
    1876:	2a a7       	std	Y+42, r18	; 0x2a
    1878:	3e a5       	ldd	r19, Y+46	; 0x2e
    187a:	31 50       	subi	r19, 0x01	; 1
    187c:	3e a7       	std	Y+46, r19	; 0x2e
    187e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1880:	88 23       	and	r24, r24
    1882:	41 f7       	brne	.-48     	; 0x1854 <main+0x88>
    Timer_init(&TIMER_configurations);
    1884:	ce 01       	movw	r24, r28
    1886:	4c 96       	adiw	r24, 0x1c	; 28
    1888:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <Timer_init>
    Timer_setCallBack(&Timer_Callbackfunc, TIMER1);
    188c:	86 e3       	ldi	r24, 0x36	; 54
    188e:	9e e0       	ldi	r25, 0x0E	; 14
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	0e 94 58 11 	call	0x22b0	; 0x22b0 <Timer_setCallBack>


    /* Initialize peripherals */
    Buzzer_init();
    1896:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
    DC_Motor_init();
    189a:	0e 94 cc 05 	call	0xb98	; 0xb98 <DC_Motor_init>
    PIR_init();
    189e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <PIR_init>

    while (1) {
        switch (application_stage) {
    18a2:	80 91 68 00 	lds	r24, 0x0068
    18a6:	e8 2f       	mov	r30, r24
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	fc a3       	std	Y+36, r31	; 0x24
    18ac:	eb a3       	std	Y+35, r30	; 0x23
    18ae:	2b a1       	ldd	r18, Y+35	; 0x23
    18b0:	3c a1       	ldd	r19, Y+36	; 0x24
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	19 f1       	breq	.+70     	; 0x18fe <main+0x132>
    18b8:	8b a1       	ldd	r24, Y+35	; 0x23
    18ba:	9c a1       	ldd	r25, Y+36	; 0x24
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	34 f4       	brge	.+12     	; 0x18ce <main+0x102>
    18c2:	eb a1       	ldd	r30, Y+35	; 0x23
    18c4:	fc a1       	ldd	r31, Y+36	; 0x24
    18c6:	e1 30       	cpi	r30, 0x01	; 1
    18c8:	f1 05       	cpc	r31, r1
    18ca:	69 f0       	breq	.+26     	; 0x18e6 <main+0x11a>
    18cc:	ea cf       	rjmp	.-44     	; 0x18a2 <main+0xd6>
    18ce:	2b a1       	ldd	r18, Y+35	; 0x23
    18d0:	3c a1       	ldd	r19, Y+36	; 0x24
    18d2:	23 30       	cpi	r18, 0x03	; 3
    18d4:	31 05       	cpc	r19, r1
    18d6:	c1 f1       	breq	.+112    	; 0x1948 <main+0x17c>
    18d8:	8b a1       	ldd	r24, Y+35	; 0x23
    18da:	9c a1       	ldd	r25, Y+36	; 0x24
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <main+0x118>
    18e2:	9a c0       	rjmp	.+308    	; 0x1a18 <main+0x24c>
    18e4:	de cf       	rjmp	.-68     	; 0x18a2 <main+0xd6>

            /* Receive password and confirmation password, then proceed to check stage */
            case PASSWARD_RECEIVING_STAGE:
                receive_passward(passward);
    18e6:	8f e7       	ldi	r24, 0x7F	; 127
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <receive_passward>
                receive_passward(confirmed_passward);
    18ee:	84 e8       	ldi	r24, 0x84	; 132
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <receive_passward>
                application_stage = CHECKING_PASSWARD_STAGE;
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	80 93 68 00 	sts	0x0068, r24
    18fc:	d2 cf       	rjmp	.-92     	; 0x18a2 <main+0xd6>
                break;

                /* Verify the password against the confirmation password */
            case CHECKING_PASSWARD_STAGE: {
                uint8 passwards_check = check_passwards(passward, confirmed_passward);
    18fe:	8f e7       	ldi	r24, 0x7F	; 127
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	24 e8       	ldi	r18, 0x84	; 132
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	b9 01       	movw	r22, r18
    1908:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <check_passwards>
    190c:	8a 8b       	std	Y+18, r24	; 0x12

                /* If passwords match, save to EEPROM and proceed to main options */
                if (passwards_check == EQUAL_PASS) {
    190e:	8a 89       	ldd	r24, Y+18	; 0x12
    1910:	80 31       	cpi	r24, 0x10	; 16
    1912:	79 f4       	brne	.+30     	; 0x1932 <main+0x166>
                    send_byte(EQUAL_PASS);
    1914:	80 e1       	ldi	r24, 0x10	; 16
    1916:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>
                    EEPROM_writeArray(0x0000, passward, PASSWARD_LENGTH);
    191a:	2f e7       	ldi	r18, 0x7F	; 127
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b9 01       	movw	r22, r18
    1924:	45 e0       	ldi	r20, 0x05	; 5
    1926:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EEPROM_writeArray>
                    application_stage = MAIN_OPTIONS_STAGE;
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	80 93 68 00 	sts	0x0068, r24
    1930:	b8 cf       	rjmp	.-144    	; 0x18a2 <main+0xd6>
                }
                    /* If passwords do not match, go back to password receiving stage */
                else if (passwards_check == NOT_EQUAL_PASS) {
    1932:	8a 89       	ldd	r24, Y+18	; 0x12
    1934:	81 31       	cpi	r24, 0x11	; 17
    1936:	09 f0       	breq	.+2      	; 0x193a <main+0x16e>
    1938:	b4 cf       	rjmp	.-152    	; 0x18a2 <main+0xd6>
                    send_byte(NOT_EQUAL_PASS);
    193a:	81 e1       	ldi	r24, 0x11	; 17
    193c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>
                    application_stage = PASSWARD_RECEIVING_STAGE;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 68 00 	sts	0x0068, r24
    1946:	ad cf       	rjmp	.-166    	; 0x18a2 <main+0xd6>
                /* Main options stage to open door or reset password based on user input */
            case MAIN_OPTIONS_STAGE: {
                uint8 passwards_check, choice;

                /* Receive and verify entered password against stored password */
                receive_passward(passward);
    1948:	8f e7       	ldi	r24, 0x7F	; 127
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <receive_passward>
                EEPROM_readArray(0x0000, confirmed_passward, PASSWARD_LENGTH);
    1950:	24 e8       	ldi	r18, 0x84	; 132
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	b9 01       	movw	r22, r18
    195a:	45 e0       	ldi	r20, 0x05	; 5
    195c:	0e 94 01 08 	call	0x1002	; 0x1002 <EEPROM_readArray>
                passwards_check = check_passwards(passward, confirmed_passward);
    1960:	8f e7       	ldi	r24, 0x7F	; 127
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	24 e8       	ldi	r18, 0x84	; 132
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	b9 01       	movw	r22, r18
    196a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <check_passwards>
    196e:	89 8b       	std	Y+17, r24	; 0x11

                /* If password is correct, send confirmation and check user choice */
                if (passwards_check == EQUAL_PASS) {
    1970:	89 89       	ldd	r24, Y+17	; 0x11
    1972:	80 31       	cpi	r24, 0x10	; 16
    1974:	a9 f4       	brne	.+42     	; 0x19a0 <main+0x1d4>
                    send_byte(EQUAL_PASS);
    1976:	80 e1       	ldi	r24, 0x10	; 16
    1978:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>
                    choice = receive_byte();
    197c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <receive_byte>
    1980:	88 8b       	std	Y+16, r24	; 0x10

                    /* Open door or reset password based on user choice */
                    if (choice == '+') {
    1982:	88 89       	ldd	r24, Y+16	; 0x10
    1984:	8b 32       	cpi	r24, 0x2B	; 43
    1986:	21 f4       	brne	.+8      	; 0x1990 <main+0x1c4>
                        application_stage = OPEN_DOOR_STAGE;
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	80 93 68 00 	sts	0x0068, r24
    198e:	89 cf       	rjmp	.-238    	; 0x18a2 <main+0xd6>
                    } else if (choice == '-') {
    1990:	88 89       	ldd	r24, Y+16	; 0x10
    1992:	8d 32       	cpi	r24, 0x2D	; 45
    1994:	09 f0       	breq	.+2      	; 0x1998 <main+0x1cc>
    1996:	85 cf       	rjmp	.-246    	; 0x18a2 <main+0xd6>
                        application_stage = PASSWARD_RECEIVING_STAGE;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 68 00 	sts	0x0068, r24
    199e:	81 cf       	rjmp	.-254    	; 0x18a2 <main+0xd6>
                    }
                }
                    /* If password is incorrect, allow retry attempts and activate buzzer if all fail */
                else if (passwards_check == NOT_EQUAL_PASS) {
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	81 31       	cpi	r24, 0x11	; 17
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <main+0x1dc>
    19a6:	7d cf       	rjmp	.-262    	; 0x18a2 <main+0xd6>
                    uint8 count;

                    send_byte(NOT_EQUAL_PASS);
    19a8:	81 e1       	ldi	r24, 0x11	; 17
    19aa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>

                    /* Allow up to RETRIES attempts */
                    for (count = 0; count < RETRIES; count++) {
    19ae:	1f 86       	std	Y+15, r1	; 0x0f
    19b0:	22 c0       	rjmp	.+68     	; 0x19f6 <main+0x22a>
                        receive_passward(passward);
    19b2:	8f e7       	ldi	r24, 0x7F	; 127
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <receive_passward>
                        EEPROM_readArray(0x0000, confirmed_passward, PASSWARD_LENGTH);
    19ba:	24 e8       	ldi	r18, 0x84	; 132
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	b9 01       	movw	r22, r18
    19c4:	45 e0       	ldi	r20, 0x05	; 5
    19c6:	0e 94 01 08 	call	0x1002	; 0x1002 <EEPROM_readArray>

                        if (check_passwards(passward, confirmed_passward) == EQUAL_PASS) {
    19ca:	8f e7       	ldi	r24, 0x7F	; 127
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	24 e8       	ldi	r18, 0x84	; 132
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	b9 01       	movw	r22, r18
    19d4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <check_passwards>
    19d8:	80 31       	cpi	r24, 0x10	; 16
    19da:	39 f4       	brne	.+14     	; 0x19ea <main+0x21e>
                            send_byte(EQUAL_PASS);
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>
                            application_stage = MAIN_OPTIONS_STAGE;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	80 93 68 00 	sts	0x0068, r24
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <main+0x230>
                            break;
                        } else {
                            send_byte(NOT_EQUAL_PASS);
    19ea:	81 e1       	ldi	r24, 0x11	; 17
    19ec:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>
                    uint8 count;

                    send_byte(NOT_EQUAL_PASS);

                    /* Allow up to RETRIES attempts */
                    for (count = 0; count < RETRIES; count++) {
    19f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	d8 f2       	brcs	.-74     	; 0x19b2 <main+0x1e6>
                            send_byte(NOT_EQUAL_PASS);
                        }
                    }

                    /* Activate buzzer if password is incorrect after all retries */
                    if (count == RETRIES) {
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <main+0x244>
                        Buzzer_on();
    1a02:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>

                        _delay_seconds(60);
    1a06:	8c e3       	ldi	r24, 0x3C	; 60
    1a08:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_delay_seconds>

                        Buzzer_off();
    1a0c:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
                    }

                    application_stage = MAIN_OPTIONS_STAGE;
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	80 93 68 00 	sts	0x0068, r24
    1a16:	45 cf       	rjmp	.-374    	; 0x18a2 <main+0xd6>
                break;
            }

                /* Open door sequence with motor rotation and PIR sensor check */
            case OPEN_DOOR_STAGE:
                PWM_Timer0_init();
    1a18:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <PWM_Timer0_init>
                DC_Motor_Rotate(DC_MOTOR_CCW, 100);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	64 e6       	ldi	r22, 0x64	; 100
    1a20:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_Motor_Rotate>
                _delay_seconds(15);
    1a24:	8f e0       	ldi	r24, 0x0F	; 15
    1a26:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_delay_seconds>
                DC_Motor_Rotate(DC_MOTOR_STOP, 0);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_Motor_Rotate>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e8       	ldi	r25, 0x80	; 128
    1a36:	ab e3       	ldi	r26, 0x3B	; 59
    1a38:	b5 e4       	ldi	r27, 0x45	; 69
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	ad 87       	std	Y+13, r26	; 0x0d
    1a40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a ef       	ldi	r20, 0xFA	; 250
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
    1a5c:	98 87       	std	Y+8, r25	; 0x08
    1a5e:	a9 87       	std	Y+9, r26	; 0x09
    1a60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <main+0x2b8>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <main+0x336>
	else if (__tmp > 65535)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <main+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <main+0x318>
    1ac6:	88 ec       	ldi	r24, 0xC8	; 200
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <main+0x306>
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <main+0x2fa>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <main+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <main+0x342>
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(3000);

                /* Wait until no motion is detected */
                while (PIR_Motion() == MOTION);
    1b16:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <PIR_Motion>
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	e1 f3       	breq	.-8      	; 0x1b16 <main+0x34a>
                send_byte(NO_MOTION);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <send_byte>

                /* Rotate motor counterclockwise to close door */
                DC_Motor_Rotate(DC_MOTOR_CW, 100);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	64 e6       	ldi	r22, 0x64	; 100
    1b28:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_Motor_Rotate>
                _delay_seconds(15);
    1b2c:	8f e0       	ldi	r24, 0x0F	; 15
    1b2e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_delay_seconds>
                DC_Motor_Rotate(DC_MOTOR_STOP, 0);
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_Motor_Rotate>

                application_stage = MAIN_OPTIONS_STAGE;
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	80 93 68 00 	sts	0x0068, r24
    1b40:	b0 ce       	rjmp	.-672    	; 0x18a2 <main+0xd6>

00001b42 <check_passwards>:
        }
    }
}

/* Check if two password arrays match */
uint8 check_passwards(uint8 *passward_array1, uint8 *passward_array2) {
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <check_passwards+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <check_passwards+0x8>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <check_passwards+0xa>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9b 83       	std	Y+3, r25	; 0x03
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	7d 83       	std	Y+5, r23	; 0x05
    1b56:	6c 83       	std	Y+4, r22	; 0x04
    for (uint8 count = 0; count < PASSWARD_LENGTH; count++) {
    1b58:	19 82       	std	Y+1, r1	; 0x01
    1b5a:	1a c0       	rjmp	.+52     	; 0x1b90 <check_passwards+0x4e>
        if (passward_array1[count] != passward_array2[count]) {
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	9b 81       	ldd	r25, Y+3	; 0x03
    1b66:	fc 01       	movw	r30, r24
    1b68:	e2 0f       	add	r30, r18
    1b6a:	f3 1f       	adc	r31, r19
    1b6c:	40 81       	ld	r20, Z
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e2 0f       	add	r30, r18
    1b7c:	f3 1f       	adc	r31, r19
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 17       	cp	r20, r24
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <check_passwards+0x48>
            return NOT_EQUAL_PASS;
    1b84:	81 e1       	ldi	r24, 0x11	; 17
    1b86:	8e 83       	std	Y+6, r24	; 0x06
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <check_passwards+0x58>
    }
}

/* Check if two password arrays match */
uint8 check_passwards(uint8 *passward_array1, uint8 *passward_array2) {
    for (uint8 count = 0; count < PASSWARD_LENGTH; count++) {
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	85 30       	cpi	r24, 0x05	; 5
    1b94:	18 f3       	brcs	.-58     	; 0x1b5c <check_passwards+0x1a>
        if (passward_array1[count] != passward_array2[count]) {
            return NOT_EQUAL_PASS;
        }
    }
    return EQUAL_PASS;
    1b96:	80 e1       	ldi	r24, 0x10	; 16
    1b98:	8e 83       	std	Y+6, r24	; 0x06
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1b9c:	26 96       	adiw	r28, 0x06	; 6
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <receive_passward>:

/* Receives a password through UART into the specified array */
void receive_passward(uint8 *passward_array) {
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <receive_passward+0xa>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9b 83       	std	Y+3, r25	; 0x03
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
    while (UART_recieveByte() != READY_BYTE);
    1bc2:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1bc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <receive_passward+0x14>
    UART_sendByte(READY_BYTE);
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>

    for (uint8 count = 0; count < PASSWARD_LENGTH; count++) {
    1bd0:	19 82       	std	Y+1, r1	; 0x01
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <receive_passward+0x44>
        passward_array[count] = UART_recieveByte();
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	8c 01       	movw	r16, r24
    1be0:	02 0f       	add	r16, r18
    1be2:	13 1f       	adc	r17, r19
    1be4:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 83       	st	Z, r24
/* Receives a password through UART into the specified array */
void receive_passward(uint8 *passward_array) {
    while (UART_recieveByte() != READY_BYTE);
    UART_sendByte(READY_BYTE);

    for (uint8 count = 0; count < PASSWARD_LENGTH; count++) {
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	70 f3       	brcs	.-36     	; 0x1bd4 <receive_passward+0x26>
        passward_array[count] = UART_recieveByte();
    }

    UART_sendByte(DONE_BYTE);
    1bf8:	80 ef       	ldi	r24, 0xF0	; 240
    1bfa:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <send_byte>:

/* Sends a byte through UART with synchronization */
void send_byte(uint8 byte) {
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    UART_sendByte(READY_BYTE);
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
    while (UART_recieveByte() != READY_BYTE);
    1c20:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1c24:	8f 3f       	cpi	r24, 0xFF	; 255
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <send_byte+0x12>
    UART_sendByte(byte);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
    while (UART_recieveByte() != DONE_BYTE);
    1c2e:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1c32:	80 3f       	cpi	r24, 0xF0	; 240
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <send_byte+0x20>
}
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <receive_byte>:

/* Receives a byte through UART with synchronization */
uint8 receive_byte() {
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    uint8 byte;
    while (UART_recieveByte() != READY_BYTE);
    1c48:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <receive_byte+0xa>
    UART_sendByte(READY_BYTE);
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
    byte = UART_recieveByte();
    1c56:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    UART_sendByte(DONE_BYTE);
    1c5c:	80 ef       	ldi	r24, 0xF0	; 240
    1c5e:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
    return byte;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <Timer_Callbackfunc>:

/* Timer callback function to increment tick count */
void Timer_Callbackfunc() {
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    ticks++;
    1c74:	80 91 78 00 	lds	r24, 0x0078
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 78 00 	sts	0x0078, r24
}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <_delay_seconds>:

void _delay_seconds(uint8 seconds) {
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    ticks = 0; // Reset tick counter
    1c90:	10 92 78 00 	sts	0x0078, r1

    while (ticks < seconds); // Wait until the desired seconds have passed
    1c94:	90 91 78 00 	lds	r25, 0x0078
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	98 17       	cp	r25, r24
    1c9c:	d8 f3       	brcs	.-10     	; 0x1c94 <_delay_seconds+0x10>
}
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <__vector_11>:
static volatile void (*g_callBackPtr_Timer1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_Timer2)(void) = NULL_PTR;

/* ISR for Timer0 Overflow */
ISR(TIMER0_OVF_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer0 != NULL_PTR)
    1cd0:	80 91 79 00 	lds	r24, 0x0079
    1cd4:	90 91 7a 00 	lds	r25, 0x007A
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__vector_11+0x40>
    {
        g_callBackPtr_Timer0(); /* Call the callback function for Timer0 Overflow */
    1cdc:	e0 91 79 00 	lds	r30, 0x0079
    1ce0:	f0 91 7a 00 	lds	r31, 0x007A
    1ce4:	09 95       	icall
    }
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	bf 91       	pop	r27
    1cf0:	af 91       	pop	r26
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	7f 91       	pop	r23
    1cf8:	6f 91       	pop	r22
    1cfa:	5f 91       	pop	r21
    1cfc:	4f 91       	pop	r20
    1cfe:	3f 91       	pop	r19
    1d00:	2f 91       	pop	r18
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <__vector_10>:

/* ISR for Timer0 Compare Match */
ISR(TIMER0_COMP_vect)
{
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer0 != NULL_PTR)
    1d36:	80 91 79 00 	lds	r24, 0x0079
    1d3a:	90 91 7a 00 	lds	r25, 0x007A
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <__vector_10+0x40>
    {
        g_callBackPtr_Timer0(); /* Call the callback function for Timer0 Compare Match */
    1d42:	e0 91 79 00 	lds	r30, 0x0079
    1d46:	f0 91 7a 00 	lds	r31, 0x007A
    1d4a:	09 95       	icall
    }
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_9>:

/*************************** TIMER1 *******************************/

/* ISR for Timer1 Overflow */
ISR(TIMER1_OVF_vect)
{
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer1 != NULL_PTR)
    1d9c:	80 91 7b 00 	lds	r24, 0x007B
    1da0:	90 91 7c 00 	lds	r25, 0x007C
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <__vector_9+0x40>
    {
        g_callBackPtr_Timer1(); /* Call the callback function for Timer1 Overflow */
    1da8:	e0 91 7b 00 	lds	r30, 0x007B
    1dac:	f0 91 7c 00 	lds	r31, 0x007C
    1db0:	09 95       	icall
    }
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_7>:

/* ISR for Timer1 Compare Match */
ISR(TIMER1_COMPA_vect)
{
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer1 != NULL_PTR)
    1e02:	80 91 7b 00 	lds	r24, 0x007B
    1e06:	90 91 7c 00 	lds	r25, 0x007C
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <__vector_7+0x40>
    {
        g_callBackPtr_Timer1(); /* Call the callback function for Timer1 Compare Match */
    1e0e:	e0 91 7b 00 	lds	r30, 0x007B
    1e12:	f0 91 7c 00 	lds	r31, 0x007C
    1e16:	09 95       	icall
    }
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_5>:

/************************** TIMER2 **************************/

/* ISR for Timer2 Overflow */
ISR(TIMER2_OVF_vect)
{
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer2 != NULL_PTR)
    1e68:	80 91 7d 00 	lds	r24, 0x007D
    1e6c:	90 91 7e 00 	lds	r25, 0x007E
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	29 f0       	breq	.+10     	; 0x1e7e <__vector_5+0x40>
    {
        g_callBackPtr_Timer2(); /* Call the callback function for Timer2 Overflow */
    1e74:	e0 91 7d 00 	lds	r30, 0x007D
    1e78:	f0 91 7e 00 	lds	r31, 0x007E
    1e7c:	09 95       	icall
    }
}
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_4>:

/* ISR for Timer2 Compare Match */
ISR(TIMER2_COMP_vect)
{
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_Timer2 != NULL_PTR)
    1ece:	80 91 7d 00 	lds	r24, 0x007D
    1ed2:	90 91 7e 00 	lds	r25, 0x007E
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <__vector_4+0x40>
    {
        g_callBackPtr_Timer2(); /* Call the callback function for Timer2 Compare Match */
    1eda:	e0 91 7d 00 	lds	r30, 0x007D
    1ede:	f0 91 7e 00 	lds	r31, 0x007E
    1ee2:	09 95       	icall
    }
}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	ff 91       	pop	r31
    1eea:	ef 91       	pop	r30
    1eec:	bf 91       	pop	r27
    1eee:	af 91       	pop	r26
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	7f 91       	pop	r23
    1ef6:	6f 91       	pop	r22
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <Timer_init>:

/* Function to initialize the timer with configurations */
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	2a 97       	sbiw	r28, 0x0a	; 10
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID)
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3a 87       	std	Y+10, r19	; 0x0a
    1f2e:	29 87       	std	Y+9, r18	; 0x09
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <Timer_init+0x32>
    1f3a:	69 c0       	rjmp	.+210    	; 0x200e <Timer_init+0x104>
    1f3c:	29 85       	ldd	r18, Y+9	; 0x09
    1f3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <Timer_init+0x3e>
    1f46:	ca c0       	rjmp	.+404    	; 0x20dc <Timer_init+0x1d2>
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <Timer_init+0x48>
    1f50:	40 c1       	rjmp	.+640    	; 0x21d2 <Timer_init+0x2c8>
        /* Initialize Timer0 */
        case TIMER0:



            TCNT0 = (uint8)(Config_Ptr->timer_InitialValue); /* Set initial count value */
    1f52:	a2 e5       	ldi	r26, 0x52	; 82
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	8c 93       	st	X, r24

            TCCR0 = ((TCNT0 & 0xF8) | (Config_Ptr->timer_clock)); /* Set clock source */
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e2 e5       	ldi	r30, 0x52	; 82
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	98 7f       	andi	r25, 0xF8	; 248
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	85 81       	ldd	r24, Z+5	; 0x05
    1f74:	89 2b       	or	r24, r25
    1f76:	8c 93       	st	X, r24

            TCCR0 |= (1 << FOC0); /* Force Output Compare for non-PWM mode */
    1f78:	a3 e5       	ldi	r26, 0x53	; 83
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e3 e5       	ldi	r30, 0x53	; 83
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 68       	ori	r24, 0x80	; 128
    1f84:	8c 93       	st	X, r24

            /* Configure Timer0 Mode */
            switch (Config_Ptr->timer_mode)
    1f86:	e9 81       	ldd	r30, Y+1	; 0x01
    1f88:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8a:	86 81       	ldd	r24, Z+6	; 0x06
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	38 87       	std	Y+8, r19	; 0x08
    1f92:	2f 83       	std	Y+7, r18	; 0x07
    1f94:	8f 81       	ldd	r24, Y+7	; 0x07
    1f96:	98 85       	ldd	r25, Y+8	; 0x08
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	31 f0       	breq	.+12     	; 0x1fa8 <Timer_init+0x9e>
    1f9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f9e:	38 85       	ldd	r19, Y+8	; 0x08
    1fa0:	21 30       	cpi	r18, 0x01	; 1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	b9 f0       	breq	.+46     	; 0x1fd4 <Timer_init+0xca>
    1fa6:	15 c1       	rjmp	.+554    	; 0x21d2 <Timer_init+0x2c8>
            {
                case OVERFLOW:
                    CLEAR_BIT(TCCR0, WGM00); /* Set to normal mode */
    1fa8:	a3 e5       	ldi	r26, 0x53	; 83
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e3 e5       	ldi	r30, 0x53	; 83
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 7b       	andi	r24, 0xBF	; 191
    1fb4:	8c 93       	st	X, r24
                    CLEAR_BIT(TCCR0, WGM01);
    1fb6:	a3 e5       	ldi	r26, 0x53	; 83
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e3 e5       	ldi	r30, 0x53	; 83
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	87 7f       	andi	r24, 0xF7	; 247
    1fc2:	8c 93       	st	X, r24

                    SET_BIT(TIMSK, TOIE0); /* Enable Timer0 Overflow interrupt */
    1fc4:	a9 e5       	ldi	r26, 0x59	; 89
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e9 e5       	ldi	r30, 0x59	; 89
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	81 60       	ori	r24, 0x01	; 1
    1fd0:	8c 93       	st	X, r24
    1fd2:	ff c0       	rjmp	.+510    	; 0x21d2 <Timer_init+0x2c8>
                    break;

                case COMPARE:
                    SET_BIT(TCCR0, WGM01);   /* Set to CTC mode */
    1fd4:	a3 e5       	ldi	r26, 0x53	; 83
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e3 e5       	ldi	r30, 0x53	; 83
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 60       	ori	r24, 0x08	; 8
    1fe0:	8c 93       	st	X, r24
                    CLEAR_BIT(TCCR0, WGM00);
    1fe2:	a3 e5       	ldi	r26, 0x53	; 83
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e3 e5       	ldi	r30, 0x53	; 83
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7b       	andi	r24, 0xBF	; 191
    1fee:	8c 93       	st	X, r24

                    OCR0 = (uint8)(Config_Ptr->timer_compare_MatchValue); /* Set compare match value */
    1ff0:	ac e5       	ldi	r26, 0x5C	; 92
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	8c 93       	st	X, r24

                    SET_BIT(TIMSK, OCIE0); /* Enable Timer0 Compare Match interrupt */
    1ffe:	a9 e5       	ldi	r26, 0x59	; 89
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e9 e5       	ldi	r30, 0x59	; 89
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	82 60       	ori	r24, 0x02	; 2
    200a:	8c 93       	st	X, r24
    200c:	e2 c0       	rjmp	.+452    	; 0x21d2 <Timer_init+0x2c8>
            break;

        /* Initialize Timer1 */
            case TIMER1:
                /* FOC1A = 1, FOC1B = 1 for non-PWM Modes */
                TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    200e:	ef e4       	ldi	r30, 0x4F	; 79
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8c e0       	ldi	r24, 0x0C	; 12
    2014:	80 83       	st	Z, r24
                TCCR1B = 0;
    2016:	ee e4       	ldi	r30, 0x4E	; 78
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1

                TCNT1 = Config_Ptr->timer_InitialValue; /* Set initial count value */
    201c:	ac e4       	ldi	r26, 0x4C	; 76
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e9 81       	ldd	r30, Y+1	; 0x01
    2022:	fa 81       	ldd	r31, Y+2	; 0x02
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	9c 93       	st	X, r25
    202c:	8e 93       	st	-X, r24
                TCCR1B |= (Config_Ptr->timer_clock); /* Start clock source */
    202e:	ae e4       	ldi	r26, 0x4E	; 78
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ee e4       	ldi	r30, 0x4E	; 78
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	90 81       	ld	r25, Z
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	85 81       	ldd	r24, Z+5	; 0x05
    203e:	89 2b       	or	r24, r25
    2040:	8c 93       	st	X, r24

                /* Configure Timer1 Mode */
                switch (Config_Ptr->timer_mode)
    2042:	e9 81       	ldd	r30, Y+1	; 0x01
    2044:	fa 81       	ldd	r31, Y+2	; 0x02
    2046:	86 81       	ldd	r24, Z+6	; 0x06
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3e 83       	std	Y+6, r19	; 0x06
    204e:	2d 83       	std	Y+5, r18	; 0x05
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	31 f0       	breq	.+12     	; 0x2064 <Timer_init+0x15a>
    2058:	2d 81       	ldd	r18, Y+5	; 0x05
    205a:	3e 81       	ldd	r19, Y+6	; 0x06
    205c:	21 30       	cpi	r18, 0x01	; 1
    205e:	31 05       	cpc	r19, r1
    2060:	29 f1       	breq	.+74     	; 0x20ac <Timer_init+0x1a2>
    2062:	b7 c0       	rjmp	.+366    	; 0x21d2 <Timer_init+0x2c8>
                {
                    case OVERFLOW:
                        CLEAR_BIT(TCCR1B, WGM13); /* Set to normal mode */
    2064:	ae e4       	ldi	r26, 0x4E	; 78
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ee e4       	ldi	r30, 0x4E	; 78
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7e       	andi	r24, 0xEF	; 239
    2070:	8c 93       	st	X, r24
                        CLEAR_BIT(TCCR1B, WGM12);
    2072:	ae e4       	ldi	r26, 0x4E	; 78
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ee e4       	ldi	r30, 0x4E	; 78
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	87 7f       	andi	r24, 0xF7	; 247
    207e:	8c 93       	st	X, r24
                        CLEAR_BIT(TCCR1A, WGM11);
    2080:	af e4       	ldi	r26, 0x4F	; 79
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ef e4       	ldi	r30, 0x4F	; 79
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8d 7f       	andi	r24, 0xFD	; 253
    208c:	8c 93       	st	X, r24
                        CLEAR_BIT(TCCR1A, WGM10);
    208e:	af e4       	ldi	r26, 0x4F	; 79
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ef e4       	ldi	r30, 0x4F	; 79
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8e 7f       	andi	r24, 0xFE	; 254
    209a:	8c 93       	st	X, r24

                        SET_BIT(TIMSK, TOIE1); /* Enable Timer1 Overflow interrupt */
    209c:	a9 e5       	ldi	r26, 0x59	; 89
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e9 e5       	ldi	r30, 0x59	; 89
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	84 60       	ori	r24, 0x04	; 4
    20a8:	8c 93       	st	X, r24
    20aa:	93 c0       	rjmp	.+294    	; 0x21d2 <Timer_init+0x2c8>
                        break;

                    case COMPARE:
                        SET_BIT(TCCR1B, WGM12); /* Set to CTC mode */
    20ac:	ae e4       	ldi	r26, 0x4E	; 78
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ee e4       	ldi	r30, 0x4E	; 78
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 60       	ori	r24, 0x08	; 8
    20b8:	8c 93       	st	X, r24
                        OCR1A = Config_Ptr->timer_compare_MatchValue; /* Set compare match value */
    20ba:	aa e4       	ldi	r26, 0x4A	; 74
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
                        SET_BIT(TIMSK, OCIE1A); /* Enable Timer1 Compare Match interrupt */
    20cc:	a9 e5       	ldi	r26, 0x59	; 89
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e9 e5       	ldi	r30, 0x59	; 89
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 61       	ori	r24, 0x10	; 16
    20d8:	8c 93       	st	X, r24
    20da:	7b c0       	rjmp	.+246    	; 0x21d2 <Timer_init+0x2c8>
                break;


        /* Initialize Timer2 */
        case TIMER2:
            TCCR2 = 0; /* Reset Timer2 control register */
    20dc:	e5 e4       	ldi	r30, 0x45	; 69
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1
            TCNT2 = 0; /* Reset Timer2 counter register */
    20e2:	e4 e4       	ldi	r30, 0x44	; 68
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	10 82       	st	Z, r1
            OCR2 = 0;  /* Reset Timer2 Output Compare register */
    20e8:	e3 e4       	ldi	r30, 0x43	; 67
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	10 82       	st	Z, r1

            CLEAR_BIT(TIMSK, OCIE2); /* Disable Timer2 Compare Match interrupt */
    20ee:	a9 e5       	ldi	r26, 0x59	; 89
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 e5       	ldi	r30, 0x59	; 89
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8f 77       	andi	r24, 0x7F	; 127
    20fa:	8c 93       	st	X, r24
            CLEAR_BIT(TIMSK, TOIE2); /* Disable Timer2 Overflow interrupt */
    20fc:	a9 e5       	ldi	r26, 0x59	; 89
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e9 e5       	ldi	r30, 0x59	; 89
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 7b       	andi	r24, 0xBF	; 191
    2108:	8c 93       	st	X, r24

            TCNT2 = (Config_Ptr->timer_InitialValue) & 0x00FF; /* Set initial count value */
    210a:	a4 e4       	ldi	r26, 0x44	; 68
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	8c 93       	st	X, r24

            TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock); /* Set clock source */
    2118:	a5 e4       	ldi	r26, 0x45	; 69
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e4       	ldi	r30, 0x45	; 69
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	98 2f       	mov	r25, r24
    2124:	98 7f       	andi	r25, 0xF8	; 248
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	85 81       	ldd	r24, Z+5	; 0x05
    212c:	89 2b       	or	r24, r25
    212e:	8c 93       	st	X, r24

            /* Configure Timer2 Mode */
            switch (Config_Ptr->timer_mode)
    2130:	e9 81       	ldd	r30, Y+1	; 0x01
    2132:	fa 81       	ldd	r31, Y+2	; 0x02
    2134:	86 81       	ldd	r24, Z+6	; 0x06
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	3c 83       	std	Y+4, r19	; 0x04
    213c:	2b 83       	std	Y+3, r18	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	31 f0       	breq	.+12     	; 0x2152 <Timer_init+0x248>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	21 30       	cpi	r18, 0x01	; 1
    214c:	31 05       	cpc	r19, r1
    214e:	f1 f0       	breq	.+60     	; 0x218c <Timer_init+0x282>
    2150:	40 c0       	rjmp	.+128    	; 0x21d2 <Timer_init+0x2c8>
            {
                case OVERFLOW:
                    CLEAR_BIT(TCCR2, WGM20); /* Set to normal mode */
    2152:	a5 e4       	ldi	r26, 0x45	; 69
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e4       	ldi	r30, 0x45	; 69
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	8f 7b       	andi	r24, 0xBF	; 191
    215e:	8c 93       	st	X, r24
                    CLEAR_BIT(TCCR2, WGM21);
    2160:	a5 e4       	ldi	r26, 0x45	; 69
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e4       	ldi	r30, 0x45	; 69
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	87 7f       	andi	r24, 0xF7	; 247
    216c:	8c 93       	st	X, r24

                    SET_BIT(TCCR2, FOC2); /* Force Output Compare for non-PWM mode */
    216e:	a5 e4       	ldi	r26, 0x45	; 69
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e5 e4       	ldi	r30, 0x45	; 69
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	8c 93       	st	X, r24

                    SET_BIT(TIMSK, TOIE2); /* Enable Timer2 Overflow interrupt */
    217c:	a9 e5       	ldi	r26, 0x59	; 89
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e9 e5       	ldi	r30, 0x59	; 89
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	8c 93       	st	X, r24
    218a:	23 c0       	rjmp	.+70     	; 0x21d2 <Timer_init+0x2c8>
                    break;

                case COMPARE:
                    CLEAR_BIT(TCCR2, WGM20); /* Set to CTC mode */
    218c:	a5 e4       	ldi	r26, 0x45	; 69
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e5 e4       	ldi	r30, 0x45	; 69
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8f 7b       	andi	r24, 0xBF	; 191
    2198:	8c 93       	st	X, r24
                    SET_BIT(TCCR2, WGM21);
    219a:	a5 e4       	ldi	r26, 0x45	; 69
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e4       	ldi	r30, 0x45	; 69
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	88 60       	ori	r24, 0x08	; 8
    21a6:	8c 93       	st	X, r24

                    SET_BIT(TCCR2, FOC2); /* Force Output Compare for non-PWM mode */
    21a8:	a5 e4       	ldi	r26, 0x45	; 69
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e4       	ldi	r30, 0x45	; 69
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 68       	ori	r24, 0x80	; 128
    21b4:	8c 93       	st	X, r24

                    OCR2 = (Config_Ptr->timer_compare_MatchValue) & 0x00FF; /* Set compare match value */
    21b6:	a3 e4       	ldi	r26, 0x43	; 67
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e9 81       	ldd	r30, Y+1	; 0x01
    21bc:	fa 81       	ldd	r31, Y+2	; 0x02
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	8c 93       	st	X, r24

                    SET_BIT(TIMSK, OCIE2); /* Enable Timer2 Compare Match interrupt */
    21c4:	a9 e5       	ldi	r26, 0x59	; 89
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e9 e5       	ldi	r30, 0x59	; 89
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	8c 93       	st	X, r24
                    break;
            }
            break;
    }
}
    21d2:	2a 96       	adiw	r28, 0x0a	; 10
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <Timer_deInit+0x6>
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3b 83       	std	Y+3, r19	; 0x03
    21fa:	2a 83       	std	Y+2, r18	; 0x02
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	11 f1       	breq	.+68     	; 0x224a <Timer_deInit+0x66>
    2206:	2a 81       	ldd	r18, Y+2	; 0x02
    2208:	3b 81       	ldd	r19, Y+3	; 0x03
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	99 f1       	breq	.+102    	; 0x2276 <Timer_deInit+0x92>
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	09 f0       	breq	.+2      	; 0x221a <Timer_deInit+0x36>
    2218:	45 c0       	rjmp	.+138    	; 0x22a4 <Timer_deInit+0xc0>
	{
	case TIMER0:

		/* Clear all registers of Timer0 */
		TCCR0 = 0;
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	10 82       	st	Z, r1
		TCNT0 = 0;
    2220:	e2 e5       	ldi	r30, 0x52	; 82
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	10 82       	st	Z, r1
		OCR0 = 0;
    2226:	ec e5       	ldi	r30, 0x5C	; 92
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	10 82       	st	Z, r1

		/* Clear all interrupt enables for Timer0 (OCIE0=0, TOIE0=0) */
		CLEAR_BIT(TIMSK, OCIE0);
    222c:	a9 e5       	ldi	r26, 0x59	; 89
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e9 e5       	ldi	r30, 0x59	; 89
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8d 7f       	andi	r24, 0xFD	; 253
    2238:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    223a:	a9 e5       	ldi	r26, 0x59	; 89
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e9 e5       	ldi	r30, 0x59	; 89
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8e 7f       	andi	r24, 0xFE	; 254
    2246:	8c 93       	st	X, r24
    2248:	2d c0       	rjmp	.+90     	; 0x22a4 <Timer_deInit+0xc0>
		break;

	case TIMER1:

		/* Clear all registers of Timer1 */
		TCCR1A = 0;
    224a:	ef e4       	ldi	r30, 0x4F	; 79
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	10 82       	st	Z, r1
		TCCR1B = 0;
    2250:	ee e4       	ldi	r30, 0x4E	; 78
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	10 82       	st	Z, r1
		TCNT1 = 0;
    2256:	ec e4       	ldi	r30, 0x4C	; 76
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	11 82       	std	Z+1, r1	; 0x01
    225c:	10 82       	st	Z, r1
		OCR1A = 0;
    225e:	ea e4       	ldi	r30, 0x4A	; 74
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	11 82       	std	Z+1, r1	; 0x01
    2264:	10 82       	st	Z, r1

		/* Clear all interrupt enables for Timer1 (TICIE1=0, OCIE1A=0, OCIE1B=0, TOIE1=0) */
		TIMSK &= 0xC3; // Clear bits OCIE1A, OCIE1B, and TOIE1
    2266:	a9 e5       	ldi	r26, 0x59	; 89
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 e5       	ldi	r30, 0x59	; 89
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	83 7c       	andi	r24, 0xC3	; 195
    2272:	8c 93       	st	X, r24
    2274:	17 c0       	rjmp	.+46     	; 0x22a4 <Timer_deInit+0xc0>
		break;

	case TIMER2:

		/* Clear all registers of Timer2 */
		TCCR2 = 0;
    2276:	e5 e4       	ldi	r30, 0x45	; 69
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	10 82       	st	Z, r1
		TCNT2 = 0;
    227c:	e4 e4       	ldi	r30, 0x44	; 68
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	10 82       	st	Z, r1
		OCR2 = 0;
    2282:	e3 e4       	ldi	r30, 0x43	; 67
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	10 82       	st	Z, r1

		/* Clear all interrupt enables for Timer2 (OCIE2=0, TOIE2=0) */
		CLEAR_BIT(TIMSK, OCIE2);
    2288:	a9 e5       	ldi	r26, 0x59	; 89
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e9 e5       	ldi	r30, 0x59	; 89
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    2296:	a9 e5       	ldi	r26, 0x59	; 89
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e9 e5       	ldi	r30, 0x59	; 89
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7b       	andi	r24, 0xBF	; 191
    22a2:	8c 93       	st	X, r24
		break;
	}
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <Timer_setCallBack>:

/* Function to set callback function for a specific timer interrupt */
void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <Timer_setCallBack+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <Timer_setCallBack+0x8>
    22b8:	0f 92       	push	r0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID)
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3d 83       	std	Y+5, r19	; 0x05
    22cc:	2c 83       	std	Y+4, r18	; 0x04
    22ce:	8c 81       	ldd	r24, Y+4	; 0x04
    22d0:	9d 81       	ldd	r25, Y+5	; 0x05
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <Timer_setCallBack+0x48>
    22d8:	2c 81       	ldd	r18, Y+4	; 0x04
    22da:	3d 81       	ldd	r19, Y+5	; 0x05
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	91 f0       	breq	.+36     	; 0x2306 <Timer_setCallBack+0x56>
    22e2:	8c 81       	ldd	r24, Y+4	; 0x04
    22e4:	9d 81       	ldd	r25, Y+5	; 0x05
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	a1 f4       	brne	.+40     	; 0x2312 <Timer_setCallBack+0x62>
    {
        case TIMER0:
            g_callBackPtr_Timer0 = a_ptr;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	90 93 7a 00 	sts	0x007A, r25
    22f2:	80 93 79 00 	sts	0x0079, r24
    22f6:	0d c0       	rjmp	.+26     	; 0x2312 <Timer_setCallBack+0x62>
            break;
        case TIMER1:
            g_callBackPtr_Timer1 = a_ptr;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	90 93 7c 00 	sts	0x007C, r25
    2300:	80 93 7b 00 	sts	0x007B, r24
    2304:	06 c0       	rjmp	.+12     	; 0x2312 <Timer_setCallBack+0x62>
            break;
        case TIMER2:
            g_callBackPtr_Timer2 = a_ptr;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	90 93 7e 00 	sts	0x007E, r25
    230e:	80 93 7d 00 	sts	0x007D, r24
            break;
    }
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <TWI_init+0x6>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
    /* Set the TWI bit rate based on the provided bit_rate */
    TWBR = Config_Ptr->bit_rate;
    2330:	a0 e2       	ldi	r26, 0x20	; 32
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e9 81       	ldd	r30, Y+1	; 0x01
    2336:	fa 81       	ldd	r31, Y+2	; 0x02
    2338:	81 81       	ldd	r24, Z+1	; 0x01
    233a:	8c 93       	st	X, r24
    TWSR = 0x00;
    233c:	e1 e2       	ldi	r30, 0x21	; 33
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	10 82       	st	Z, r1

    /* Set TWI address */
    TWAR = (Config_Ptr->address << 1); /* Adjust the address to align with the 7-bit addressing */
    2342:	a2 e2       	ldi	r26, 0x22	; 34
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	80 81       	ld	r24, Z
    234c:	88 0f       	add	r24, r24
    234e:	8c 93       	st	X, r24

    /* Enable TWI */
    TWCR = (1 << TWEN);
    2350:	e6 e5       	ldi	r30, 0x56	; 86
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	84 e0       	ldi	r24, 0x04	; 4
    2356:	80 83       	st	Z, r24
}
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <TWI_start>:

void TWI_start(void)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag before sending the start bit, send the start bit, enable TWI Module */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    236a:	e6 e5       	ldi	r30, 0x56	; 86
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	84 ea       	ldi	r24, 0xA4	; 164
    2370:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is sent successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2372:	e6 e5       	ldi	r30, 0x56	; 86
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	88 23       	and	r24, r24
    237a:	dc f7       	brge	.-10     	; 0x2372 <TWI_start+0x10>
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <TWI_stop>:

void TWI_stop(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag, send the stop bit, enable TWI Module */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    238a:	e6 e5       	ldi	r30, 0x56	; 86
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	84 e9       	ldi	r24, 0x94	; 148
    2390:	80 83       	st	Z, r24
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data on TWI data Register */
    TWDR = data;
    23a4:	e3 e2       	ldi	r30, 0x23	; 35
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	80 83       	st	Z, r24

    /* Clear the TWINT flag, enable TWI Module */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23ac:	e6 e5       	ldi	r30, 0x56	; 86
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	84 e8       	ldi	r24, 0x84	; 132
    23b2:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data is sent successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23b4:	e6 e5       	ldi	r30, 0x56	; 86
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	88 23       	and	r24, r24
    23bc:	dc f7       	brge	.-10     	; 0x23b4 <TWI_writeByte+0x1c>
}
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag, enable sending ACK, enable TWI Module */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    23ce:	e6 e5       	ldi	r30, 0x56	; 86
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	84 ec       	ldi	r24, 0xC4	; 196
    23d4:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23d6:	e6 e5       	ldi	r30, 0x56	; 86
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	88 23       	and	r24, r24
    23de:	dc f7       	brge	.-10     	; 0x23d6 <TWI_readByteWithACK+0x10>

    /* Read Data */
    return TWDR;
    23e0:	e3 e2       	ldi	r30, 0x23	; 35
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag, enable TWI Module */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23f4:	e6 e5       	ldi	r30, 0x56	; 86
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	84 e8       	ldi	r24, 0x84	; 132
    23fa:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23fc:	e6 e5       	ldi	r30, 0x56	; 86
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	88 23       	and	r24, r24
    2404:	dc f7       	brge	.-10     	; 0x23fc <TWI_readByteWithNACK+0x10>

    /* Read Data */
    return TWDR;
    2406:	e3 e2       	ldi	r30, 0x23	; 35
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return TWSR & 0xF8;
    241a:	e1 e2       	ldi	r30, 0x21	; 33
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	88 7f       	andi	r24, 0xF8	; 248
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * Config_Ptr)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <UART_init+0x6>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <UART_init+0x8>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    2438:	1a 82       	std	Y+2, r1	; 0x02
    243a:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
    243c:	eb e2       	ldi	r30, 0x2B	; 43
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	80 83       	st	Z, r24

    /* Enable the Sending and Receiving enable*/
    UCSRB = (1 << RXEN) | (1 << TXEN);
    2444:	ea e2       	ldi	r30, 0x2A	; 42
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	88 e1       	ldi	r24, 0x18	; 24
    244a:	80 83       	st	Z, r24

    /* If 9-bit data size, enable UCSZ2 in UCSRB */
    if (Config_Ptr->bit_data == Character_SIZE_9)
    244c:	eb 81       	ldd	r30, Y+3	; 0x03
    244e:	fc 81       	ldd	r31, Y+4	; 0x04
    2450:	80 81       	ld	r24, Z
    2452:	87 30       	cpi	r24, 0x07	; 7
    2454:	41 f4       	brne	.+16     	; 0x2466 <UART_init+0x3e>
    {
        UCSRB |= (1 << UCSZ2); /* Set UCSZ2 for 9-bit data size */
    2456:	aa e2       	ldi	r26, 0x2A	; 42
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	ea e2       	ldi	r30, 0x2A	; 42
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	84 60       	ori	r24, 0x04	; 4
    2462:	8c 93       	st	X, r24
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <UART_init+0x4c>
    }
    else
    {
        UCSRB &= ~(1 << UCSZ2); /* Clear UCSZ2 for other data sizes */
    2466:	aa e2       	ldi	r26, 0x2A	; 42
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ea e2       	ldi	r30, 0x2A	; 42
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8b 7f       	andi	r24, 0xFB	; 251
    2472:	8c 93       	st	X, r24

    /************************** UCSRC Description **************************
     * URSEL  = 1  to select the UCSRC register
     * Set UCSZ1 and UCSZ0 for character size based on Config_Ptr->bit_data
     ***********************************************************************/
    UCSRC = (1 << URSEL);  /* To select UCSRC register */
    2474:	e0 e4       	ldi	r30, 0x40	; 64
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 e8       	ldi	r24, 0x80	; 128
    247a:	80 83       	st	Z, r24

    /* Write the Parity bit (Config_Ptr->parity) */
    UCSRC |= (Config_Ptr->parity);
    247c:	a0 e4       	ldi	r26, 0x40	; 64
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e0 e4       	ldi	r30, 0x40	; 64
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	90 81       	ld	r25, Z
    2486:	eb 81       	ldd	r30, Y+3	; 0x03
    2488:	fc 81       	ldd	r31, Y+4	; 0x04
    248a:	81 81       	ldd	r24, Z+1	; 0x01
    248c:	89 2b       	or	r24, r25
    248e:	8c 93       	st	X, r24

    /* Write the Stop bit (Config_Ptr->stop_bit) */
    UCSRC |= (Config_Ptr->stop_bit);
    2490:	a0 e4       	ldi	r26, 0x40	; 64
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e0 e4       	ldi	r30, 0x40	; 64
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	90 81       	ld	r25, Z
    249a:	eb 81       	ldd	r30, Y+3	; 0x03
    249c:	fc 81       	ldd	r31, Y+4	; 0x04
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	89 2b       	or	r24, r25
    24a2:	8c 93       	st	X, r24

    /* Write the character size (UCSZ1, UCSZ0 in UCSRC) */
    UCSRC |= ((Config_Ptr->bit_data & 0x03) << 1); /* Shift left to align UCSZ0 and UCSZ1 */
    24a4:	a0 e4       	ldi	r26, 0x40	; 64
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e0 e4       	ldi	r30, 0x40	; 64
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	28 2f       	mov	r18, r24
    24b0:	eb 81       	ldd	r30, Y+3	; 0x03
    24b2:	fc 81       	ldd	r31, Y+4	; 0x04
    24b4:	80 81       	ld	r24, Z
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	83 70       	andi	r24, 0x03	; 3
    24bc:	90 70       	andi	r25, 0x00	; 0
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	82 2b       	or	r24, r18
    24c4:	8c 93       	st	X, r24

    /* Calculate the UBRR value for the baud rate */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    24c6:	eb 81       	ldd	r30, Y+3	; 0x03
    24c8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ca:	83 81       	ldd	r24, Z+3	; 0x03
    24cc:	94 81       	ldd	r25, Z+4	; 0x04
    24ce:	a5 81       	ldd	r26, Z+5	; 0x05
    24d0:	b6 81       	ldd	r27, Z+6	; 0x06
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	aa 1f       	adc	r26, r26
    24d8:	bb 1f       	adc	r27, r27
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	aa 1f       	adc	r26, r26
    24e0:	bb 1f       	adc	r27, r27
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	aa 1f       	adc	r26, r26
    24e8:	bb 1f       	adc	r27, r27
    24ea:	9c 01       	movw	r18, r24
    24ec:	ad 01       	movw	r20, r26
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	92 e1       	ldi	r25, 0x12	; 18
    24f2:	aa e7       	ldi	r26, 0x7A	; 122
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 3c 13 	call	0x2678	; 0x2678 <__udivmodsi4>
    24fe:	da 01       	movw	r26, r20
    2500:	c9 01       	movw	r24, r18
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01

    /* Set the UBRR value: First 8 bits in UBRRL and the higher 4 bits in UBRRH */
    UBRRH = (ubrr_value >> 8);
    2508:	e0 e4       	ldi	r30, 0x40	; 64
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	89 2f       	mov	r24, r25
    2512:	99 27       	eor	r25, r25
    2514:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    2516:	e9 e2       	ldi	r30, 0x29	; 41
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 83       	st	Z, r24
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	0f 92       	push	r0
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2538:	eb e2       	ldi	r30, 0x2B	; 43
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	80 72       	andi	r24, 0x20	; 32
    2544:	90 70       	andi	r25, 0x00	; 0
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	b9 f3       	breq	.-18     	; 0x2538 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    254a:	ec e2       	ldi	r30, 0x2C	; 44
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	88 23       	and	r24, r24
    256a:	dc f7       	brge	.-10     	; 0x2562 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    256c:	ec e2       	ldi	r30, 0x2C	; 44
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
}
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <UART_sendString+0x6>
    257e:	0f 92       	push	r0
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9b 83       	std	Y+3, r25	; 0x03
    2586:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2588:	19 82       	std	Y+1, r1	; 0x01
    258a:	0e c0       	rjmp	.+28     	; 0x25a8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	fc 01       	movw	r30, r24
    2598:	e2 0f       	add	r30, r18
    259a:	f3 1f       	adc	r31, r19
    259c:	80 81       	ld	r24, Z
    259e:	0e 94 96 12 	call	0x252c	; 0x252c <UART_sendByte>
		i++;
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	fc 01       	movw	r30, r24
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	80 81       	ld	r24, Z
    25ba:	88 23       	and	r24, r24
    25bc:	39 f7       	brne	.-50     	; 0x258c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <UART_receiveString+0xa>
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9b 83       	std	Y+3, r25	; 0x03
    25dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25de:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	8c 01       	movw	r16, r24
    25ec:	02 0f       	add	r16, r18
    25ee:	13 1f       	adc	r17, r19
    25f0:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    25f4:	f8 01       	movw	r30, r16
    25f6:	80 83       	st	Z, r24
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	9b 81       	ldd	r25, Y+3	; 0x03
    260a:	8c 01       	movw	r16, r24
    260c:	02 0f       	add	r16, r18
    260e:	13 1f       	adc	r17, r19
    2610:	0e 94 ad 12 	call	0x255a	; 0x255a <UART_recieveByte>
    2614:	f8 01       	movw	r30, r16
    2616:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	80 81       	ld	r24, Z
    262a:	83 32       	cpi	r24, 0x23	; 35
    262c:	31 f7       	brne	.-52     	; 0x25fa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	9b 81       	ldd	r25, Y+3	; 0x03
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	10 82       	st	Z, r1
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret

00002650 <__udivmodhi4>:
    2650:	aa 1b       	sub	r26, r26
    2652:	bb 1b       	sub	r27, r27
    2654:	51 e1       	ldi	r21, 0x11	; 17
    2656:	07 c0       	rjmp	.+14     	; 0x2666 <__udivmodhi4_ep>

00002658 <__udivmodhi4_loop>:
    2658:	aa 1f       	adc	r26, r26
    265a:	bb 1f       	adc	r27, r27
    265c:	a6 17       	cp	r26, r22
    265e:	b7 07       	cpc	r27, r23
    2660:	10 f0       	brcs	.+4      	; 0x2666 <__udivmodhi4_ep>
    2662:	a6 1b       	sub	r26, r22
    2664:	b7 0b       	sbc	r27, r23

00002666 <__udivmodhi4_ep>:
    2666:	88 1f       	adc	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	5a 95       	dec	r21
    266c:	a9 f7       	brne	.-22     	; 0x2658 <__udivmodhi4_loop>
    266e:	80 95       	com	r24
    2670:	90 95       	com	r25
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	08 95       	ret

00002678 <__udivmodsi4>:
    2678:	a1 e2       	ldi	r26, 0x21	; 33
    267a:	1a 2e       	mov	r1, r26
    267c:	aa 1b       	sub	r26, r26
    267e:	bb 1b       	sub	r27, r27
    2680:	fd 01       	movw	r30, r26
    2682:	0d c0       	rjmp	.+26     	; 0x269e <__udivmodsi4_ep>

00002684 <__udivmodsi4_loop>:
    2684:	aa 1f       	adc	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	ee 1f       	adc	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	a2 17       	cp	r26, r18
    268e:	b3 07       	cpc	r27, r19
    2690:	e4 07       	cpc	r30, r20
    2692:	f5 07       	cpc	r31, r21
    2694:	20 f0       	brcs	.+8      	; 0x269e <__udivmodsi4_ep>
    2696:	a2 1b       	sub	r26, r18
    2698:	b3 0b       	sbc	r27, r19
    269a:	e4 0b       	sbc	r30, r20
    269c:	f5 0b       	sbc	r31, r21

0000269e <__udivmodsi4_ep>:
    269e:	66 1f       	adc	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	1a 94       	dec	r1
    26a8:	69 f7       	brne	.-38     	; 0x2684 <__udivmodsi4_loop>
    26aa:	60 95       	com	r22
    26ac:	70 95       	com	r23
    26ae:	80 95       	com	r24
    26b0:	90 95       	com	r25
    26b2:	9b 01       	movw	r18, r22
    26b4:	ac 01       	movw	r20, r24
    26b6:	bd 01       	movw	r22, r26
    26b8:	cf 01       	movw	r24, r30
    26ba:	08 95       	ret

000026bc <__prologue_saves__>:
    26bc:	2f 92       	push	r2
    26be:	3f 92       	push	r3
    26c0:	4f 92       	push	r4
    26c2:	5f 92       	push	r5
    26c4:	6f 92       	push	r6
    26c6:	7f 92       	push	r7
    26c8:	8f 92       	push	r8
    26ca:	9f 92       	push	r9
    26cc:	af 92       	push	r10
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	ca 1b       	sub	r28, r26
    26e6:	db 0b       	sbc	r29, r27
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	09 94       	ijmp

000026f4 <__epilogue_restores__>:
    26f4:	2a 88       	ldd	r2, Y+18	; 0x12
    26f6:	39 88       	ldd	r3, Y+17	; 0x11
    26f8:	48 88       	ldd	r4, Y+16	; 0x10
    26fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    26fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2700:	8c 84       	ldd	r8, Y+12	; 0x0c
    2702:	9b 84       	ldd	r9, Y+11	; 0x0b
    2704:	aa 84       	ldd	r10, Y+10	; 0x0a
    2706:	b9 84       	ldd	r11, Y+9	; 0x09
    2708:	c8 84       	ldd	r12, Y+8	; 0x08
    270a:	df 80       	ldd	r13, Y+7	; 0x07
    270c:	ee 80       	ldd	r14, Y+6	; 0x06
    270e:	fd 80       	ldd	r15, Y+5	; 0x05
    2710:	0c 81       	ldd	r16, Y+4	; 0x04
    2712:	1b 81       	ldd	r17, Y+3	; 0x03
    2714:	aa 81       	ldd	r26, Y+2	; 0x02
    2716:	b9 81       	ldd	r27, Y+1	; 0x01
    2718:	ce 0f       	add	r28, r30
    271a:	d1 1d       	adc	r29, r1
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	ed 01       	movw	r28, r26
    2728:	08 95       	ret

0000272a <_exit>:
    272a:	f8 94       	cli

0000272c <__stop_program>:
    272c:	ff cf       	rjmp	.-2      	; 0x272c <__stop_program>
