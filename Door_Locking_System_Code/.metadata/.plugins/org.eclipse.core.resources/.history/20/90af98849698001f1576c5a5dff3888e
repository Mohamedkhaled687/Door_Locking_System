/*
 * main.c
 *
 *  Created on: Oct 26, 2024
 *      Author: Mohamed
 */

#include "external_eeprom.h"
#include "PIR.h"
#include "DC_MOTOR.h"
#include "BUZZER.h"
#include "UART.h"
#include "PWM.h"
#include "TWI.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define PASSWARD_RECEIVING_STAGE 1
#define CHECKING_PASSWARD_STAGE 2
#define MAIN_OPTIONS_STAGE 3
#define OPEN_DOOR_STAGE 4

#define PASSWARD_LENGTH 5

#define READY_BYTE 0xFF
#define DONE_BYTE 0xF0

#define RETRIES 3

#define EQUAL_PASS 0x10
#define NOT_EQUAL_PASS 0x11

uint8_t passward[PASSWARD_LENGTH], confirmed_passward[PASSWARD_LENGTH];
uint8_t application_stage = PASSWARD_RECEIVING_STAGE;

void receive_passward(uint8_t *passward_array);
void send_byte(uint8_t byte);
uint8_t receive_byte();
uint8_t check_passwards(uint8_t *passward_array1, uint8_t *passward_array2);

int main() {

    sei();

    UART_ConfigType UART_configuartions = {Character_SIZE_8, EVEN_PARITY, ONE_BIT, 9600};
    UART_init(&UART_configuartions);

    TWI_ConfigType TWI_configurations = {0x01, 0x02};
    TWI_init(&TWI_configurations);

    Buzzer_init();
    DC_Motor_init();
    PIR_init();

    while (1) {
        switch (application_stage) {
            case PASSWARD_RECEIVING_STAGE:
                receive_passward(passward);
                receive_passward(confirmed_passward);
                application_stage = CHECKING_PASSWARD_STAGE;
                break;

            case CHECKING_PASSWARD_STAGE: {
                uint8_t passwards_check = check_passwards(passward, confirmed_passward);

                if (passwards_check == EQUAL_PASS) {
                    send_byte(EQUAL_PASS);
                    EEPROM_writeArray(0x0000, passward, PASSWARD_LENGTH);
                    application_stage = MAIN_OPTIONS_STAGE;

                } else if (passwards_check == NOT_EQUAL_PASS) {
                    send_byte(NOT_EQUAL_PASS);
                    application_stage = PASSWARD_RECEIVING_STAGE;
                }
                break;
            }

            case MAIN_OPTIONS_STAGE: {
                uint8_t passwards_check, choice;
                receive_passward(passward);
                choice = receive_byte();
                EEPROM_readArray(0x0000, confirmed_passward, PASSWARD_LENGTH);
                passwards_check = check_passwards(passward, confirmed_passward);

                if (passwards_check == EQUAL_PASS) {
                    send_byte(EQUAL_PASS);
                    if (choice == '+') {
                        application_stage = OPEN_DOOR_STAGE;
                    } else if (choice == '-') {
                        application_stage = PASSWARD_RECEIVING_STAGE;
                    }
                } else if (passwards_check == NOT_EQUAL_PASS) {

                	send_byte(NOT_EQUAL_PASS);

                    uint8_t count;
                    for (count = 0; count < RETRIES; count++) {
                        receive_passward(passward);
                        EEPROM_readArray(0x0000, confirmed_passward, PASSWARD_LENGTH);

                        if (check_passwards(passward, confirmed_passward) == EQUAL_PASS) {
                            send_byte(EQUAL_PASS);
                            application_stage = MAIN_OPTIONS_STAGE;
                            break;
                        }
                    }

                    if (count == RETRIES) {
                        Buzzer_on();
                        _delay_ms(60000);

                        Buzzer_off();

                    }

                    application_stage = MAIN_OPTIONS_STAGE;
                }
                break;
            }

            case OPEN_DOOR_STAGE:
                PWM_Timer0_init();
                DC_Motor_Rotate(DC_MOTOR_CW, 100);
                _delay_ms(15000);
                DC_Motor_Rotate(DC_MOTOR_STOP, 0);
                _delay_ms(3000);

                while (PIR_Motion() == MOTION);
                send_byte(NO_MOTION);

                DC_Motor_Rotate(DC_MOTOR_CCW, 100);
                _delay_ms(15000);
                DC_Motor_Rotate(DC_MOTOR_STOP, 0);

                application_stage = MAIN_OPTIONS_STAGE;
                break;
        }
    }
}

uint8_t check_passwards(uint8_t *passward_array1, uint8_t *passward_array2) {
    for (uint8_t count = 0; count < PASSWARD_LENGTH; count++) {
        if (passward_array1[count] != passward_array2[count]) {
            return NOT_EQUAL_PASS;
        }
    }
    return EQUAL_PASS;
}

void receive_passward(uint8_t *passward_array) {
    while (UART_recieveByte() != READY_BYTE);
    UART_sendByte(READY_BYTE);

    for (uint8_t count = 0; count < PASSWARD_LENGTH; count++) {
        passward_array[count] = UART_recieveByte();
    }

    UART_sendByte(DONE_BYTE);
}

void send_byte(uint8_t byte) {
    UART_sendByte(READY_BYTE);
    while (UART_recieveByte() != READY_BYTE);
    UART_sendByte(byte);
    while (UART_recieveByte() != DONE_BYTE);
}

uint8_t receive_byte() {
    uint8_t byte;
    while (UART_recieveByte() != READY_BYTE);
    UART_sendByte(READY_BYTE);
    byte = UART_recieveByte();
    UART_sendByte(DONE_BYTE);
    return byte;
}
