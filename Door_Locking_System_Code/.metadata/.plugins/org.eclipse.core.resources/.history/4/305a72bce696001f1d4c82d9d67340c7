/*
 * main.c
 *
 *  Created on: Oct 26, 2024
 *      Author: Mohamed Khaled
 */

#include "lcd.h"
#include "keypad.h"
#include "timer.h"
#include "uart.h"
#include <avr/io.h>
#include <util/delay.h>


#define CREATE_SYSTEM_PASSWARD 1
#define CHECK_PASSWARD 2
#define MAIN_OPTIONS 3
#define OPEN_DOOR 4

#define PASSWARD_LENGTH 5

#define READY_BYTE 0xFF
#define DONE_BYTE 0xF0

#define RETRIES 2

#define EQUAL_PASS 0x10
#define NOT_EQUAL_PASS 0x11

uint8 passward[PASSWARD_LENGTH] , confirmed_passward[PASSWARD_LENGTH];
uint8 application_steps = 1;

int main(){


	sei();

	UART_ConfigType Config_ptr = {Character_SIZE_8 , EVEN_PARITY , ONE_BIT , 9600};

	UART_init(&Config_ptr);
	lcd_init();


	while(1){
		switch(application_steps){
		case CREATE_SYSTEM_PASSWARD:

			LCD_clearScreen();
			LCD_displayString("Plz Enter Pass: ");
			LCD_moveCursor(1 , 0);

			get_passward(passward); // getting passward from user

			LCD_displayStringRowColumn(0, 0,"Plz re-enter the");
			LCD_displayStringRowColumn(1, 0,"same pass: ");
			LCD_moveCursor(1 , 10);

			get_passward(confirmed_passward); // getting the password again to confirm


			send_passward(passward); // sending the first pass

			send_passward(confirmed_passward); // sending the second pass

			application_steps = CHECK_PASSWARD;

			break;

		case CHECK_PASSWARD :

			uint8 check_pass = receive_byte();

			if(check_pass != EQUAL_PASS){
				application_steps = CREATE_SYSTEM_PASSWARD;
			}

			else{
				application_steps = MAIN_OPTIONS;
			}
			break;

		case MAIN_OPTIONS:

			uint8 choice;

			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
			LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");

			choice = KEYPAD_getPressedKey();

			while(choice != '+' || choice != '-');

			LCD_clearScreen();
			LCD_displayString("Plz Enter Pass: ");
			LCD_moveCursor(1 , 0);

			get_passward(passward);

			send_passward(passward);


			if(receive_byte() == EQUAL_PASS){

				send_byte(choice);

				if(choice == '+'){
					application_steps = OPEN_DOOR;
				}
				else if (choice == '-'){
					application_steps = CREATE_SYSTEM_PASSWARD;
				}

			}

			else{

				uint8 count;
				for(count = 0 ; count < RETRIES ; count++){
					LCD_clearScreen();
					LCD_displayString("Plz Enter Pass: ");
					LCD_moveCursor(1 , 0);

					get_passward(passward);

					send_passward(passward);


					if(receive_byte() == EQUAL_PASS){

						application_steps = MAIN_OPTIONS;
						break;
					}
				} // end of for

				if(count == RETRIES){
					LCD_clearScreen();

					LCD_displayStringRowColumn(0,1,"System LOCKED");
					LCD_displayStringRowColumn(1,0,"Wait for 1 min");

					_delay_ms(60000);

					application_steps = MAIN_OPTIONS;
				}

			}// end of else

			break;

		case OPEN_DOOR:

			LCD_clearScreen();
			LCD_displayStringRowColumn(0,1,"Door Unlocking");
			LCD_displayStringRowColumn(1,4,"Please Wait");


			_delay_ms(15000);


			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"wait for people");
			LCD_displayStringRowColumn(1,3,"To Enter");

		} //end of  switch


	} // end of while

} // end of main


void get_passward(uint8* passward_array){

	uint8 key_pressed , counter;

	for( counter = 0 ; counter < PASSWARD_LENGTH ;){
		key_pressed = KEYPAD_getPressedKey();

		if(key_pressed != '+' && key_pressed != '-' && key_pressed != '*' && key_pressed != '%'){
			passward_array[counter] = key_pressed;
			LCD_displayCharacter('*');
			counter++;
		}
		_delay_ms(500);
	}

	while(KEYPAD_getPressedKey() != '=');
}

void send_passward(uint8 * passward_array){
    UART_sendByte(READY_BYTE);

    while(UART_recieveByte() != READY_BYTE);

    for(uint8 i = 0 ; i < PASSWARD_LENGTH ; i++){
    	UART_sendByte(passward_array[i]);
    }

    while(UART_recieveByte() != DONE_BYTE);
}


void send_byte(uint8 byte){

	UART_sendByte(READY_BYTE);

	while(UART_recieveByte(READY_BYTE));

	UART_sendByte(byte);

	while(UART_recieveByte() != DONE_BYTE);
}

uint8 receive_byte(){
	uint8 byte;

	while(UART_recieveByte(READY_BYTE));

	UART_sendByte(READY_BYTE);

	byte = UART_recieveByte();

	UART_sendByte(DONE_BYTE);

	return byte;
}
